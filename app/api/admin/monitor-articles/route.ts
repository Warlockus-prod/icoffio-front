/**
 * üìä –°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –°–¢–ê–¢–ï–ô v1.4.0
 * 
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –∏ –∫–∞—á–µ—Å—Ç–≤–æ –∏—Ö slug'–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 * Webhook-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 */

import { NextRequest, NextResponse } from 'next/server';
import { generateSlugQualityReport } from '@/lib/api-validators';
import { validateSlug } from '@/lib/slug-utils';

export async function GET(request: NextRequest) {
  try {
    const url = new URL(request.url);
    const timeframe = url.searchParams.get('timeframe') || '24h'; // 1h, 24h, 7d, 30d
    const format = url.searchParams.get('format') || 'json'; // json, webhook, slack
    
    console.log('üìä –ó–∞–ø—Ä–æ—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ç–µ–π, timeframe:', timeframe);

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å–∏ –∏–∑ WordPress API
    const wpResponse = await fetch('https://app.icoffio.com/api/wordpress-articles', {
      headers: { 'Content-Type': 'application/json' },
      next: { revalidate: 60 } // –ö–µ—à –Ω–∞ 1 –º–∏–Ω—É—Ç—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    });

    if (!wpResponse.ok) {
      throw new Error(`WordPress API error: ${wpResponse.status}`);
    }

    const wpData = await wpResponse.json();
    const articles = wpData.success ? wpData.articles : [];

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–∞—Ç—å–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    const now = new Date();
    const timefilters: { [key: string]: Date } = {
      '1h': new Date(now.getTime() - 60 * 60 * 1000),
      '24h': new Date(now.getTime() - 24 * 60 * 60 * 1000),
      '7d': new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000),
      '30d': new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000)
    };

    const timeFilter = timefilters[timeframe] || timefilters['24h'];
    
    const recentArticles = articles.filter((article: any) => {
      const articleDate = new Date(article.date);
      return articleDate >= timeFilter;
    });

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ slug'–æ–≤ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π
    const qualityAnalysis = {
      totalNew: recentArticles.length,
      goodSlugs: 0,
      longSlugs: 0,
      invalidSlugs: 0,
      russianArticles: 0,
      averageLength: 0
    };

    const problematicArticles: any[] = [];
    let totalLength = 0;

    for (const article of recentArticles) {
      if (article.slug) {
        totalLength += article.slug.length;
        
        const isValid = validateSlug(article.slug);
        const isLong = article.slug.length > 50;
        const isRussian = article.slug.includes('-ru');

        if (isRussian) {
          qualityAnalysis.russianArticles++;
          problematicArticles.push({
            title: article.title,
            slug: article.slug,
            issue: 'russian_language',
            date: article.date
          });
        } else if (isLong) {
          qualityAnalysis.longSlugs++;
          problematicArticles.push({
            title: article.title,
            slug: article.slug,
            issue: 'too_long',
            length: article.slug.length,
            date: article.date
          });
        } else if (!isValid) {
          qualityAnalysis.invalidSlugs++;
          problematicArticles.push({
            title: article.title,
            slug: article.slug,
            issue: 'invalid_format',
            date: article.date
          });
        } else {
          qualityAnalysis.goodSlugs++;
        }
      }
    }

    qualityAnalysis.averageLength = recentArticles.length > 0 
      ? Math.round(totalLength / recentArticles.length) 
      : 0;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
    const healthStatus = qualityAnalysis.russianArticles > 0 || qualityAnalysis.longSlugs > 2
      ? 'critical'
      : qualityAnalysis.longSlugs > 0 || qualityAnalysis.invalidSlugs > 0
      ? 'warning' 
      : 'healthy';

    const healthMessage = {
      'critical': `üö® –ö–†–ò–¢–ò–ß–ù–û: ${qualityAnalysis.russianArticles + qualityAnalysis.longSlugs} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –∑–∞ ${timeframe}`,
      'warning': `‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: ${qualityAnalysis.longSlugs + qualityAnalysis.invalidSlugs} —Å—Ç–∞—Ç–µ–π —Ç—Ä–µ–±—É—é—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è`,
      'healthy': `‚úÖ –û–¢–õ–ò–ß–ù–û: –í—Å–µ –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∫–∞—á–µ—Å—Ç–≤–∞`
    }[healthStatus];

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    const recommendations: string[] = [];
    
    if (qualityAnalysis.russianArticles > 0) {
      recommendations.push(`–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å SQL –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è ${qualityAnalysis.russianArticles} —Ä—É—Å—Å–∫–∏—Ö —Å—Ç–∞—Ç–µ–π`);
    }
    
    if (qualityAnalysis.longSlugs > 0) {
      recommendations.push(`–û–±–Ω–æ–≤–∏—Ç—å ${qualityAnalysis.longSlugs} —Å—Ç–∞—Ç–µ–π —Å –¥–ª–∏–Ω–Ω—ã–º–∏ slug'–∞–º–∏`);
    }
    
    if (qualityAnalysis.invalidSlugs > 0) {
      recommendations.push(`–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é API –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö slug'–æ–≤`);
    }
    
    if (recommendations.length === 0) {
      recommendations.push('–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥');
    }

    const result = {
      success: true,
      timestamp: new Date().toISOString(),
      version: '1.4.0',
      timeframe,
      
      health: {
        status: healthStatus,
        message: healthMessage,
        score: Math.round((qualityAnalysis.goodSlugs / Math.max(1, recentArticles.length)) * 100)
      },
      
      statistics: qualityAnalysis,
      
      problematicArticles: problematicArticles.slice(0, 10), // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
      
      recommendations,
      
      trends: {
        hourlyRate: timeframe === '24h' ? Math.round(recentArticles.length / 24 * 10) / 10 : null,
        qualityImprovement: qualityAnalysis.goodSlugs > qualityAnalysis.longSlugs + qualityAnalysis.invalidSlugs,
        migrationNeeded: problematicArticles.length > 0
      }
    };

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    if (format === 'slack') {
      const slackMessage = {
        text: healthMessage,
        blocks: [
          {
            type: 'section',
            text: {
              type: 'mrkdwn',
              text: `*–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç–µ–π icoffio (${timeframe})*\n${healthMessage}`
            }
          },
          {
            type: 'fields',
            fields: [
              { type: 'mrkdwn', text: `*–ù–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π:* ${qualityAnalysis.totalNew}` },
              { type: 'mrkdwn', text: `*–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö:* ${qualityAnalysis.goodSlugs}` },
              { type: 'mrkdwn', text: `*–ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö:* ${problematicArticles.length}` },
              { type: 'mrkdwn', text: `*–°—Ç–∞—Ç—É—Å:* ${healthStatus.toUpperCase()}` }
            ]
          }
        ]
      };
      
      return NextResponse.json(slackMessage);
    }

    if (format === 'webhook') {
      const webhookPayload = {
        event: 'article_monitoring',
        timestamp: new Date().toISOString(),
        data: {
          health_status: healthStatus,
          new_articles_count: qualityAnalysis.totalNew,
          problematic_count: problematicArticles.length,
          recommendations: recommendations.length
        }
      };
      
      return NextResponse.json(webhookPayload);
    }

    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π JSON
    return NextResponse.json(result);

  } catch (error) {
    console.error('‚ùå Monitoring error:', error);
    
    return NextResponse.json({
      success: false,
      error: 'Monitoring failed',
      details: error instanceof Error ? error.message : 'Unknown error',
      timestamp: new Date().toISOString()
    }, { status: 500 });
  }
}

export async function POST(request: NextRequest) {
  try {
    // Webhook endpoint –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å–∏—Å—Ç–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    const body = await request.json();
    
    if (body.action === 'test-alert') {
      // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤
      console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤');
      
      return NextResponse.json({
        success: true,
        message: 'Alert system test completed',
        timestamp: new Date().toISOString(),
        testResult: {
          webhookReceived: true,
          monitoringActive: true,
          apiConnectivity: 'ok'
        }
      });
    }

    if (body.action === 'force-check') {
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
      console.log('üîç –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–µ–π');
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ GET —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –¥–ª—è –æ–±—Ö–æ–¥–∞ –∫–µ—à–∞
      const checkUrl = new URL('/api/admin/monitor-articles', request.url);
      checkUrl.searchParams.set('cache', 'false');
      
      return NextResponse.redirect(checkUrl);
    }

    return NextResponse.json({
      error: 'Unknown action. Available: test-alert, force-check'
    }, { status: 400 });

  } catch (error) {
    console.error('‚ùå Webhook monitoring error:', error);
    
    return NextResponse.json({
      success: false,
      error: 'Webhook processing failed'
    }, { status: 500 });
  }
}
