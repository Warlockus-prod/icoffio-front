/**
 * TELEGRAM QUEUE PROCESSOR
 * 
 * Async endpoint for processing queue jobs
 * Called by webhook in fire-and-forget pattern
 * 
 * This runs independently and sends updates to Telegram when done
 */

import { NextRequest, NextResponse } from 'next/server';
import { getQueueService } from '@/lib/queue-service';

export const runtime = 'nodejs';
export const maxDuration = 300; // 5 minutes (Pro tier only, but we set it anyway)

/**
 * Send message to Telegram
 */
async function sendTelegramMessage(chatId: number, text: string): Promise<void> {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  
  if (!botToken) {
    console.error('[Process Queue] TELEGRAM_BOT_TOKEN not configured');
    return;
  }

  try {
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text,
        parse_mode: 'HTML',
      }),
    });

    if (!response.ok) {
      const error = await response.text();
      console.error('[Process Queue] Failed to send Telegram message:', error);
    }
  } catch (error: any) {
    console.error('[Process Queue] Error sending message:', error.message);
  }
}

/**
 * Process a single job and send result to Telegram
 */
export async function POST(request: NextRequest) {
  try {
    const { jobId, chatId } = await request.json();

    if (!jobId || !chatId) {
      return NextResponse.json(
        { error: 'jobId and chatId are required' },
        { status: 400 }
      );
    }

    console.log(`[Process Queue] Starting processing for job: ${jobId}, chat: ${chatId}`);

    const queueService = getQueueService();
    const startTime = Date.now();

    // Wait for job to complete (with timeout)
    const maxWaitTime = 120000; // 2 minutes
    const checkInterval = 2000; // 2 seconds
    let totalWaited = 0;

    while (totalWaited < maxWaitTime) {
      const job = queueService.getJobStatus(jobId);

      if (!job) {
        console.error(`[Process Queue] Job not found: ${jobId}`);
        await sendTelegramMessage(
          chatId,
          `‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`
        );
        break;
      }

      if (job.status === 'completed') {
        const processingTime = Math.round((Date.now() - startTime) / 1000);
        const result = job.result;

        console.log(`[Process Queue] Job completed: ${jobId}`, result);

        if (result.published && result.url) {
          // Format message based on published languages
          let message = `‚úÖ <b>–û–ü–£–ë–õ–ò–ö–û–í–ê–ù–û!</b>\n\n` +
            `üìù <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> ${result.title || 'N/A'}\n` +
            `üí¨ <b>–°–ª–æ–≤:</b> ${result.wordCount || 'N/A'}\n` +
            `üìÅ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> ${result.category || 'Technology'}\n` +
            `üåç <b>–Ø–∑—ã–∫–∏:</b> ${result.languages?.join(', ').toUpperCase() || 'EN'}\n` +
            `‚è±Ô∏è <b>–í—Ä–µ–º—è:</b> ${processingTime}s\n\n`;

          // Add English URL
          message += `üá¨üáß <b>EN:</b>\n${result.url}\n\n`;

          // Add Polish URL if available
          if (result.urlPl) {
            message += `üáµüá± <b>PL:</b>\n${result.urlPl}\n\n`;
          }

          message += `‚ú® <b>–°—Ç–∞—Ç—É—Å:</b> –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ!`;

          await sendTelegramMessage(chatId, message);
        } else {
          await sendTelegramMessage(
            chatId,
            `‚úÖ <b>–°–æ–∑–¥–∞–Ω–æ (–Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ)</b>\n\n` +
            `üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${result.title || 'N/A'}\n` +
            `üí¨ –°–ª–æ–≤: ${result.wordCount || 'N/A'}\n` +
            `‚è±Ô∏è –í—Ä–µ–º—è: ${processingTime}s\n\n` +
            `‚ö†Ô∏è –°—Ç–∞—Ç—å—è —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞.\n` +
            `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WordPress.`
          );
        }
        break;
      }

      if (job.status === 'failed') {
        console.error(`[Process Queue] Job failed: ${jobId}`, job.error);

        // Determine error type and send appropriate message
        const errorMessage = job.error?.toLowerCase() || '';
        
        if (errorMessage.includes('generation') || errorMessage.includes('openai')) {
          await sendTelegramMessage(
            chatId,
            `‚ùå <b>–û—à–∏–±–∫–∞ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</b>\n\n` +
            `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞—Ç—å–∏.\n` +
            `–ü—Ä–∏—á–∏–Ω–∞: ${job.error || 'Unknown'}\n\n` +
            `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.`
          );
        } else if (errorMessage.includes('parsing') || errorMessage.includes('url')) {
          await sendTelegramMessage(
            chatId,
            `‚ùå <b>–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ URL</b>\n\n` +
            `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ —Å—Å—ã–ª–∫–µ.\n` +
            `–ü—Ä–∏—á–∏–Ω–∞: ${job.error || 'Unknown'}\n\n` +
            `–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞.`
          );
        } else if (errorMessage.includes('publication') || errorMessage.includes('wordpress')) {
          await sendTelegramMessage(
            chatId,
            `‚ùå <b>–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b>\n\n` +
            `–°—Ç–∞—Ç—å—è —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞.\n` +
            `–ü—Ä–∏—á–∏–Ω–∞: ${job.error || 'Unknown'}\n\n` +
            `–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.`
          );
        } else {
          await sendTelegramMessage(
            chatId,
            `‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏</b>\n\n` +
            `${job.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}\n\n` +
            `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.`
          );
        }
        break;
      }

      // Still processing
      await new Promise(resolve => setTimeout(resolve, checkInterval));
      totalWaited += checkInterval;
    }

    // Timeout
    if (totalWaited >= maxWaitTime) {
      console.error(`[Process Queue] Job timeout: ${jobId}`);
      await sendTelegramMessage(
        chatId,
        `‚è±Ô∏è <b>Timeout</b>\n\n` +
        `–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n` +
        `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–æ–∑–∂–µ –∫–æ–º–∞–Ω–¥–æ–π /queue`
      );
    }

    return NextResponse.json({ ok: true });

  } catch (error: any) {
    console.error('[Process Queue] Error:', error);
    return NextResponse.json(
      { error: error.message },
      { status: 500 }
    );
  }
}

