/**
 * TELEGRAM BOT WEBHOOK
 * 
 * Handles incoming messages from Telegram bot
 * Processes URLs and text through queue system
 * 
 * Features:
 * - URL parsing and article creation
 * - Text-to-article generation
 * - Queue management for multiple requests
 * - Status updates to Telegram
 */

import { NextRequest, NextResponse } from 'next/server';
import { getQueueService } from '@/lib/queue-service';

export const runtime = 'nodejs';
export const maxDuration = 300; // 5 minutes

// Verify Telegram secret
function verifyTelegramRequest(request: NextRequest): boolean {
  const secret = request.headers.get('x-telegram-bot-api-secret-token');
  const expectedSecret = process.env.TELEGRAM_BOT_SECRET;
  
  if (expectedSecret && secret !== expectedSecret) {
    return false;
  }
  
  return true;
}

// Send message to Telegram
async function sendTelegramMessage(chatId: number, text: string): Promise<void> {
  const token = process.env.TELEGRAM_BOT_TOKEN;
  
  if (!token) {
    console.error('TELEGRAM_BOT_TOKEN not configured');
    return;
  }

  try {
    await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text,
        parse_mode: 'HTML',
      }),
    });
  } catch (error) {
    console.error('Failed to send Telegram message:', error);
  }
}

export async function POST(request: NextRequest) {
  try {
    // Verify request
    if (!verifyTelegramRequest(request)) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    const body = await request.json();
    
    // Extract message
    const message = body.message || body.edited_message;
    if (!message) {
      return NextResponse.json({ ok: true }); // Ignore non-message updates
    }

    const chatId = message.chat?.id;
    const text = (message.text || '').trim();
    
    if (!chatId || !text) {
      return NextResponse.json({ ok: true });
    }

    // Check for commands
    if (text.startsWith('/')) {
      return await handleCommand(chatId, text);
    }

    // Detect URL or text
    const urlMatch = text.match(/https?:\/\/[^\s]+/i);
    const isUrl = !!urlMatch;

    const queueService = getQueueService();

    if (isUrl) {
      // URL parsing job
      const url = urlMatch[0];
      
      const jobId = await queueService.addJob({
        type: 'url-parse',
        data: {
          url,
          chatId,
          messageId: message.message_id,
        },
        maxRetries: 2,
      });

      await sendTelegramMessage(
        chatId,
        `üîÑ <b>URL –ø–æ–ª—É—á–µ–Ω!</b>\n\n` +
        `üîó <code>${url}</code>\n\n` +
        `üìã –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: <code>${jobId}</code>\n` +
        `‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏...`
      );

      // Start monitoring job
      monitorJob(jobId, chatId);

    } else {
      // Text generation job
      const lines = text.split('\n');
      const title = lines[0]?.substring(0, 100) || 'Article from Telegram';
      
      const jobId = await queueService.addJob({
        type: 'text-generate',
        data: {
          text,
          title,
          category: 'Technology',
          language: 'en',
          chatId,
          messageId: message.message_id,
        },
        maxRetries: 2,
      });

      await sendTelegramMessage(
        chatId,
        `‚ú® <b>–¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω!</b>\n\n` +
        `üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: <i>${title}</i>\n\n` +
        `üìã –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: <code>${jobId}</code>\n` +
        `ü§ñ AI –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—å—é...\n` +
        `‚è≥ –û–∂–∏–¥–∞–π—Ç–µ (~30 —Å–µ–∫—É–Ω–¥)`
      );

      // Start monitoring job
      monitorJob(jobId, chatId);
    }

    return NextResponse.json({ ok: true });

  } catch (error: any) {
    console.error('Telegram webhook error:', error);
    return NextResponse.json(
      { error: error.message },
      { status: 500 }
    );
  }
}

/**
 * Handle bot commands
 */
async function handleCommand(chatId: number, text: string) {
  const command = text.toLowerCase().split(' ')[0];

  switch (command) {
    case '/start':
      await sendTelegramMessage(
        chatId,
        `üëã <b>–ü—Ä–∏–≤–µ—Ç! –Ø icoffio Bot</b>\n\n` +
        `–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å—Ç–∞—Ç—å–∏:\n\n` +
        `üìù <b>–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç</b> ‚Üí –°–æ–∑–¥–∞–º —Å—Ç–∞—Ç—å—é —Å AI\n` +
        `üîó <b>–û—Ç–ø—Ä–∞–≤—å URL</b> ‚Üí –°–ø–∞—Ä—Å—é –∏ –æ–ø—É–±–ª–∏–∫—É—é\n\n` +
        `üìã <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n` +
        `/help - –ü–æ–º–æ—â—å\n` +
        `/queue - –°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏\n` +
        `/status - –ú–æ–π —Å—Ç–∞—Ç—É—Å\n\n` +
        `Powered by GPT-4o ü§ñ`
      );
      break;

    case '/help':
      await sendTelegramMessage(
        chatId,
        `üìñ <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:</b>\n\n` +
        `<b>1. –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞</b>\n` +
        `–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç).\n` +
        `AI —Å–æ–∑–¥–∞—Å—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç—å—é.\n\n` +
        `<b>2. –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç—å–∏ —Å URL</b>\n` +
        `–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é.\n` +
        `–ë–æ—Ç —Å–ø–∞—Ä—Å–∏—Ç –∏ –¥–æ–±–∞–≤–∏—Ç –≤ —Å–∏—Å—Ç–µ–º—É.\n\n` +
        `<b>3. –û—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤</b>\n` +
        `–ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—à—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ ‚Äî –æ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∞—é—Ç—Å—è –ø–æ –æ—á–µ—Ä–µ–¥–∏.\n\n` +
        `<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n` +
        `/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n` +
        `/queue - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥—å\n` +
        `/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã`
      );
      break;

    case '/queue':
      const queueService = getQueueService();
      const stats = queueService.getQueueStats();
      
      await sendTelegramMessage(
        chatId,
        `üìä <b>–°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏:</b>\n\n` +
        `üìã –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π: ${stats.total}\n` +
        `‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: ${stats.pending}\n` +
        `‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: ${stats.processing}\n` +
        `‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${stats.completed}\n` +
        `‚ùå –û—à–∏–±–∫–∏: ${stats.failed}\n\n` +
        `${stats.isProcessing ? 'üîÑ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç' : 'üí§ –°–∏—Å—Ç–µ–º–∞ –æ–∂–∏–¥–∞–µ—Ç'}`
      );
      break;

    case '/status':
      await sendTelegramMessage(
        chatId,
        `‚úÖ <b>–°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞</b>\n\n` +
        `ü§ñ AI: GPT-4o\n` +
        `üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: DALL-E 3 + Unsplash\n` +
        `üåç –Ø–∑—ã–∫–∏: EN, PL\n` +
        `üìä Queue: –ê–∫—Ç–∏–≤–Ω–∞\n\n` +
        `–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!`
      );
      break;

    default:
      await sendTelegramMessage(
        chatId,
        `‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}\n\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.`
      );
  }

  return NextResponse.json({ ok: true });
}

/**
 * Monitor job and send updates
 */
async function monitorJob(jobId: string, chatId: number) {
  const queueService = getQueueService();
  const maxAttempts = 60; // 5 minutes (5s intervals)
  let attempts = 0;

  const checkJob = async () => {
    attempts++;
    const job = queueService.getJobStatus(jobId);

    if (!job) {
      await sendTelegramMessage(
        chatId,
        `‚ùå <b>–û—à–∏–±–∫–∞:</b> –ó–∞–¥–∞–Ω–∏–µ ${jobId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`
      );
      return;
    }

    if (job.status === 'completed') {
      // Success!
      const result = job.result;
      
      await sendTelegramMessage(
        chatId,
        `‚úÖ <b>–ì–æ—Ç–æ–≤–æ!</b>\n\n` +
        `üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${result.title || 'N/A'}\n` +
        `üí¨ –°–ª–æ–≤: ${result.wordCount || 'N/A'}\n` +
        `‚è±Ô∏è –í—Ä–µ–º—è: ${Math.round((job.completedAt!.getTime() - job.startedAt!.getTime()) / 1000)}s\n\n` +
        `‚ú® –°—Ç–∞—Ç—å—è —Å–æ–∑–¥–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!`
      );
      return;
    }

    if (job.status === 'failed') {
      // Failed
      await sendTelegramMessage(
        chatId,
        `‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏</b>\n\n` +
        `–ü—Ä–∏—á–∏–Ω–∞: ${job.error || 'Unknown'}\n\n` +
        `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`
      );
      return;
    }

    if (attempts >= maxAttempts) {
      // Timeout
      await sendTelegramMessage(
        chatId,
        `‚è±Ô∏è <b>–¢–∞–π–º–∞—É—Ç</b>\n\n` +
        `–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n` +
        `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–æ–∑–∂–µ —Å –ø–æ–º–æ—â—å—é /queue`
      );
      return;
    }

    // Still processing, check again
    setTimeout(checkJob, 5000); // Check every 5 seconds
  };

  // Start checking after 3 seconds
  setTimeout(checkJob, 3000);
}

// Health check
export async function GET() {
  return NextResponse.json({
    service: 'Telegram Bot Webhook',
    version: '1.0.0',
    status: 'active',
    features: {
      urlParsing: true,
      textGeneration: true,
      queueSystem: true,
      aiPowered: true
    }
  });
}

