/**
 * TELEGRAM BOT WEBHOOK v7.11.0 - CLEAN REWRITE
 * 
 * –ü—Ä–æ—Å—Ç–∞—è –∏ —á–∏—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
 * –§–æ–∫—É—Å –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
 * 
 * @version 7.11.0
 * @date 2025-10-30
 */

import { NextRequest, NextResponse } from 'next/server';
import { getQueueService } from '@/lib/queue-service';
import { t, getUserLanguage } from '@/lib/telegram-i18n';
import { setPublicationStyle, getPublicationStyle, PublicationStyle } from '@/lib/telegram-user-preferences';

export const runtime = 'nodejs';
export const maxDuration = 300; // 5 minutes

// ============================================================================
// TELEGRAM API HELPERS
// ============================================================================

/**
 * Send message to Telegram
 */
async function sendMessage(chatId: number, text: string, options?: any): Promise<void> {
  const token = process.env.TELEGRAM_BOT_TOKEN;
  if (!token) {
    console.error('[Bot] TELEGRAM_BOT_TOKEN not configured');
    return;
  }

  try {
    const response = await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text,
        parse_mode: 'HTML',
        ...options,
      }),
    });

    if (!response.ok) {
      const error = await response.text();
      console.error('[Bot] Failed to send message:', error);
    }
  } catch (error) {
    console.error('[Bot] Error sending message:', error);
  }
}

/**
 * Verify Telegram request
 */
function verifyRequest(request: NextRequest): boolean {
  const secret = request.headers.get('x-telegram-bot-api-secret-token');
  const expectedSecret = process.env.TELEGRAM_BOT_SECRET;
  
  if (expectedSecret && secret !== expectedSecret) {
    console.warn('[Bot] Invalid secret token');
    return false;
  }
  
  return true;
}

// ============================================================================
// COMMAND HANDLERS
// ============================================================================

/**
 * Handle /start command
 */
async function handleStart(chatId: number): Promise<void> {
  const message = `
ü§ñ <b>–ü—Ä–∏–≤–µ—Ç! –Ø icoffio Bot</b>

üìù <b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Å—Ç–∞—Ç—å–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
‚Ä¢ –ü–∞—Ä—Å–∏—Ç—å —Å—Ç–∞—Ç—å–∏ –ø–æ URL
‚Ä¢ –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–∞ —Å–∞–π—Ç

üí° <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
1. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ URL
2. –Ø —Å–æ–∑–¥–∞–º —Å—Ç–∞—Ç—å—é
3. –ü–æ–ª—É—á–∏—à—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é

üìä <b>–ö–æ–º–∞–Ω–¥—ã:</b>
/queue - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üöÄ <b>–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∏–ª–∏ URL –¥–ª—è –Ω–∞—á–∞–ª–∞!</b>
`;

  await sendMessage(chatId, message);
}

/**
 * Handle /help command
 */
async function handleHelp(chatId: number): Promise<void> {
  const message = `
üìö <b>–°–ø—Ä–∞–≤–∫–∞ icoffio Bot</b>

<b>–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏:</b>
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç, –∏ —è —Å–æ–∑–¥–∞–º —Å—Ç–∞—Ç—å—é.

<b>–ü–∞—Ä—Å–∏–Ω–≥ URL:</b>
–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É, –∏ —è –∏–∑–≤–ª–µ–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç.

<b>–û—á–µ—Ä–µ–¥—å:</b>
/queue - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏

<b>–ü—Ä–æ—Ü–µ—Å—Å:</b>
1. –û—Ç–ø—Ä–∞–≤–ª—è–µ—à—å —Ç–µ–∫—Å—Ç/URL
2. –Ø –¥–æ–±–∞–≤–ª—è—é –≤ –æ—á–µ—Ä–µ–¥—å
3. AI –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç (~60 —Å–µ–∫)
4. –ü–æ–ª—É—á–∞–µ—à—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å URL

‚ùì <b>–í–æ–ø—Ä–æ—Å—ã?</b>
–ü–∏—à–∏ @icoffio_support
`;

  await sendMessage(chatId, message);
}

/**
 * Handle /queue command
 */
async function handleQueue(chatId: number): Promise<void> {
  try {
    const queueService = getQueueService();
    const stats = await queueService.getQueueStats();
    
    const message = `
üìä <b>–°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏:</b>

üìã –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π: ${stats.total}
‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: ${stats.pending}
‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: ${stats.processing}
‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${stats.completed}
‚ùå –û—à–∏–±–∫–∏: ${stats.failed}

${stats.processing > 0 ? 'üîÑ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç' : 'üí§ –°–∏—Å—Ç–µ–º–∞ –æ–∂–∏–¥–∞–µ—Ç'}
`;

    await sendMessage(chatId, message);
  } catch (error) {
    console.error('[Bot] Error getting queue stats:', error);
    await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—á–µ—Ä–µ–¥–∏');
  }
}

/**
 * Handle /style command
 */
async function handleStyle(chatId: number, command?: string): Promise<void> {
  try {
    const language = getUserLanguage(chatId);
    
    // If specific style selected
    if (command) {
      let style: PublicationStyle;
      
      switch (command) {
        case '/style_news':
          style = 'news';
          break;
        case '/style_analytical':
          style = 'analytical';
          break;
        case '/style_tutorial':
          style = 'tutorial';
          break;
        case '/style_opinion':
          style = 'opinion';
          break;
        default:
          await sendMessage(chatId, t(chatId, 'unknownCommand'));
          return;
      }
      
      await setPublicationStyle(chatId, style);
      const styleName = getStyleName(chatId, style);
      await sendMessage(chatId, t(chatId, 'styleChanged').replace('{style}', styleName));
      
      console.log(`[Bot] Style changed for chat ${chatId}: ${style}`);
      return;
    }
    
    // Show style selection menu
    const currentStyle = await getPublicationStyle(chatId);
    const currentStyleName = getStyleName(chatId, currentStyle);
    const styleMessage = t(chatId, 'styleCommand') + '\n\n' + 
                         t(chatId, 'styleCurrent').replace('{style}', currentStyleName);
    
    await sendMessage(chatId, styleMessage);
    
  } catch (error) {
    console.error('[Bot] Error handling style command:', error);
    await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª—è');
  }
}

/**
 * Get localized style name
 */
function getStyleName(chatId: number, style: PublicationStyle): string {
  const language = getUserLanguage(chatId);
  
  const styleNames: Record<string, Record<PublicationStyle, string>> = {
    ru: {
      news: t(chatId, 'styleNews'),
      analytical: t(chatId, 'styleAnalytical'),
      tutorial: t(chatId, 'styleTutorial'),
      opinion: t(chatId, 'styleOpinion'),
    },
    pl: {
      news: t(chatId, 'styleNews'),
      analytical: t(chatId, 'styleAnalytical'),
      tutorial: t(chatId, 'styleTutorial'),
      opinion: t(chatId, 'styleOpinion'),
    },
    en: {
      news: t(chatId, 'styleNews'),
      analytical: t(chatId, 'styleAnalytical'),
      tutorial: t(chatId, 'styleTutorial'),
      opinion: t(chatId, 'styleOpinion'),
    },
  };
  
  return styleNames[language]?.[style] || style;
}

// ============================================================================
// MESSAGE HANDLERS
// ============================================================================

/**
 * Handle text message (article generation)
 */
async function handleTextMessage(chatId: number, messageId: number, text: string): Promise<void> {
  try {
    // Extract title (first line) and content
    const lines = text.trim().split('\n');
    const title = lines[0].substring(0, 200); // Limit title length
    const content = text;

    // Add to queue
    const queueService = getQueueService();
    const jobId = await queueService.addJob({
      type: 'text-generate',
      max_retries: 3,
      data: {
        text: content,
        title,
        chatId,
        messageId,
      },
    });

    console.log(`[Bot] Added text job: ${jobId} for chat ${chatId}`);

    // Send confirmation
    await sendMessage(
      chatId,
      `‚ú® <b>–¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω!</b>\n\n` +
      `üìù <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> ${title}\n` +
      `üìã <b>–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å:</b> <code>${jobId}</code>\n\n` +
      `ü§ñ AI –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—å—é...\n` +
      `‚è≥ –û–∂–∏–¥–∞–π—Ç–µ (~60 —Å–µ–∫—É–Ω–¥)`
    );

    // Trigger queue processing (async, non-blocking)
    queueService.processQueue().catch(err => {
      console.error('[Bot] Queue processing error:', err);
    });

  } catch (error) {
    console.error('[Bot] Error handling text message:', error);
    await sendMessage(
      chatId,
      `‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏</b>\n\n` +
      `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`
    );
  }
}

/**
 * Handle URL message (article parsing)
 */
async function handleUrlMessage(chatId: number, messageId: number, url: string): Promise<void> {
  try {
    // Add to queue
    const queueService = getQueueService();
    const jobId = await queueService.addJob({
      type: 'url-parse',
      max_retries: 3,
      data: {
        url,
        chatId,
        messageId,
      },
    });

    console.log(`[Bot] Added URL job: ${jobId} for chat ${chatId}`);

    // Send confirmation
    await sendMessage(
      chatId,
      `üîó <b>URL –ø–æ–ª—É—á–µ–Ω!</b>\n\n` +
      `üìã <b>–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å:</b> <code>${jobId}</code>\n\n` +
      `ü§ñ –ü–∞—Ä—Å—é –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ç–∞—Ç—å—é...\n` +
      `‚è≥ –û–∂–∏–¥–∞–π—Ç–µ (~60 —Å–µ–∫—É–Ω–¥)`
    );

    // Trigger queue processing (async, non-blocking)
    queueService.processQueue().catch(err => {
      console.error('[Bot] Queue processing error:', err);
    });

  } catch (error) {
    console.error('[Bot] Error handling URL message:', error);
    await sendMessage(
      chatId,
      `‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL</b>\n\n` +
      `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`
    );
  }
}

/**
 * Detect if message contains URL
 */
function isUrl(text: string): boolean {
  try {
    const urlPattern = /https?:\/\/[^\s]+/i;
    return urlPattern.test(text);
  } catch {
    return false;
  }
}

/**
 * Extract URL from text
 */
function extractUrl(text: string): string | null {
  const urlPattern = /https?:\/\/[^\s]+/i;
  const match = text.match(urlPattern);
  return match ? match[0] : null;
}

// ============================================================================
// MAIN WEBHOOK HANDLER
// ============================================================================

export async function POST(request: NextRequest) {
  try {
    // Verify request
    if (!verifyRequest(request)) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // Parse update
    const update = await request.json();
    console.log('[Bot] Received update:', JSON.stringify(update, null, 2));

    // Extract message
    const message = update.message || update.edited_message;
    if (!message) {
      return NextResponse.json({ ok: true, message: 'No message' });
    }

    const chatId = message.chat.id;
    const messageId = message.message_id;
    const text = message.text || '';

    // Handle commands
    if (text.startsWith('/')) {
      const command = text.split(' ')[0].toLowerCase();
      
      switch (command) {
        case '/start':
          await handleStart(chatId);
          break;
        
        case '/help':
          await handleHelp(chatId);
          break;
        
        case '/queue':
          await handleQueue(chatId);
          break;
        
        case '/style':
        case '/style_news':
        case '/style_analytical':
        case '/style_tutorial':
        case '/style_opinion':
          await handleStyle(chatId, command);
          break;
        
        default:
          await sendMessage(chatId, '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.');
      }
      
      return NextResponse.json({ ok: true });
    }

    // Handle URL
    if (isUrl(text)) {
      const url = extractUrl(text);
      if (url) {
        await handleUrlMessage(chatId, messageId, url);
      } else {
        await sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å URL');
      }
      return NextResponse.json({ ok: true });
    }

    // Handle text (must be at least 50 characters)
    if (text.length >= 50) {
      await handleTextMessage(chatId, messageId, text);
      return NextResponse.json({ ok: true });
    }

    // Text too short
    await sendMessage(
      chatId,
      'üìù <b>–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π</b>\n\n' +
      '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏.\n\n' +
      '–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.'
    );

    return NextResponse.json({ ok: true });

  } catch (error) {
    console.error('[Bot] Error processing webhook:', error);
    return NextResponse.json({ error: 'Internal error' }, { status: 500 });
  }
}
