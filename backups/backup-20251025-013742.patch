diff --git a/app/[locale]/(site)/article/[slug]/page.tsx b/app/[locale]/(site)/article/[slug]/page.tsx
index 2cdcb8d..4232aea 100644
--- a/app/[locale]/(site)/article/[slug]/page.tsx
+++ b/app/[locale]/(site)/article/[slug]/page.tsx
@@ -630,7 +630,7 @@ export default async function Article({ params }: { params: { locale: string; sl
         </div>
       </Container>
 
-      <SearchModalWrapper posts={mockPosts} locale={params.locale} />
+      {/* SearchModalWrapper —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω–æ –≤ layout.tsx - –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º */}
     </>
   );
 }
\ No newline at end of file
diff --git a/app/[locale]/(site)/page.tsx b/app/[locale]/(site)/page.tsx
index 8391e5e..ca2ab32 100644
--- a/app/[locale]/(site)/page.tsx
+++ b/app/[locale]/(site)/page.tsx
@@ -234,7 +234,7 @@ export default async function Page({ params }: { params: { locale: string } }) {
         </section>
       </div>
 
-      <SearchModalWrapper posts={posts} locale={params.locale} />
+      {/* SearchModalWrapper —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω–æ –≤ layout.tsx - –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º */}
     </>
   );
 }
\ No newline at end of file
diff --git a/components/SearchModalWrapper.tsx b/components/SearchModalWrapper.tsx
index ad3a9c7..426236f 100644
--- a/components/SearchModalWrapper.tsx
+++ b/components/SearchModalWrapper.tsx
@@ -3,14 +3,33 @@
 import { useSearch } from './SearchProvider';
 import { AdvancedSearch } from './AdvancedSearch';
 import type { Post } from '@/lib/types';
+import { useState, useEffect } from 'react';
 
 interface SearchModalWrapperProps {
   posts: Post[];
   locale: string;
 }
 
-export function SearchModalWrapper({ posts, locale }: SearchModalWrapperProps) {
+export function SearchModalWrapper({ posts: initialPosts, locale }: SearchModalWrapperProps) {
   const { isSearchOpen, closeSearch } = useSearch();
+  const [posts, setPosts] = useState<Post[]>(initialPosts);
+  const [isLoading, setIsLoading] = useState(false);
+
+  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å—Ç—ã client-side –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
+  useEffect(() => {
+    if (initialPosts.length === 0 && !isLoading) {
+      setIsLoading(true);
+      fetch(`/api/articles?locale=${locale}&limit=50`)
+        .then(res => res.json())
+        .then(data => {
+          if (data.success && data.articles) {
+            setPosts(data.articles);
+          }
+        })
+        .catch(err => console.error('Failed to load articles for search:', err))
+        .finally(() => setIsLoading(false));
+    }
+  }, [initialPosts.length, locale, isLoading]);
 
   return (
     <AdvancedSearch
diff --git a/lib/data.ts b/lib/data.ts
index 5b1a0be..27368eb 100644
--- a/lib/data.ts
+++ b/lib/data.ts
@@ -48,27 +48,74 @@ async function getTranslatedArticles(): Promise<Record<string, any>> {
   return [];
 }
 
-// –°—Ç—Ä–æ–≥–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–µ–π –ø–æ —è–∑—ã–∫—É (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –≤—Å–µ —è–∑—ã–∫–∏)
+// –î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ —Ç–µ–∫—Å—Ç–µ
+function hasCyrillic(text: string): boolean {
+  return /[\u0400-\u04FF]/.test(text);
+}
+
+// –î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
+function hasPolish(text: string): boolean {
+  // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
+  return /[ƒÖƒáƒô≈Ç≈Ñ√≥≈õ≈∫≈ºƒÑƒÜƒò≈Å≈É√ì≈ö≈π≈ª]/.test(text);
+}
+
+// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–µ–π –ø–æ —è–∑—ã–∫—É —Å –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 function filterArticlesByLanguage(articles: Post[], locale: string): Post[] {
   console.log(`üåç Filtering ${articles.length} articles for locale: ${locale}`);
   
   // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏: en, pl (—Å–∞–π—Ç –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä—É—Å—Å–∫–∏–π)
-  if (['en', 'pl'].includes(locale)) {
-    const filtered = articles.filter(article => {
-      const hasLanguageSuffix = article.slug.endsWith(`-${locale}`);
-      if (hasLanguageSuffix) {
-        console.log(`‚úÖ Article matched for ${locale}: ${article.slug}`);
+  if (!['en', 'pl'].includes(locale)) {
+    console.warn(`Unsupported locale: ${locale}. Supported: 'en', 'pl' only.`);
+    return [];
+  }
+  
+  const filtered = articles.filter(article => {
+    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º slug –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—É—Ñ—Ñ–∏–∫—Å–∞ —è–∑—ã–∫–∞ (–æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
+    const slugContainsLocale = article.slug.includes(`-${locale}`);
+    
+    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞—Ç—å–∏ (title, excerpt, content) –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —è–∑—ã–∫—É
+    const contentToCheck = `${article.title} ${article.excerpt || ''} ${article.content || ''}`;
+    
+    if (locale === 'en') {
+      // –î–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–π –≤–µ—Ä—Å–∏–∏: –∏—Å–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—å–∏ —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π –∏–ª–∏ –ø–æ–ª—å—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
+      const hasUnwantedChars = hasCyrillic(contentToCheck) || hasPolish(contentToCheck);
+      
+      if (hasUnwantedChars) {
+        console.log(`üö´ Excluded from EN: ${article.slug} (contains non-English characters)`);
+        return false;
       }
-      return hasLanguageSuffix;
-    });
+      
+      // –†–∞–∑—Ä–µ—à–∞–µ–º —Å—Ç–∞—Ç—å–∏ —Å -en –≤ slug –ò–õ–ò –±–µ–∑ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —è–∑—ã–∫–æ–≤—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
+      const isEnglish = slugContainsLocale || (!hasCyrillic(contentToCheck) && !hasPolish(contentToCheck));
+      
+      if (isEnglish) {
+        console.log(`‚úÖ Article matched for EN: ${article.slug}`);
+      }
+      return isEnglish;
+    }
     
-    console.log(`üìä Filtered ${filtered.length}/${articles.length} articles for ${locale}`);
-    return filtered;
-  }
+    if (locale === 'pl') {
+      // –î–ª—è –ø–æ–ª—å—Å–∫–æ–π –≤–µ—Ä—Å–∏–∏: —Ç—Ä–µ–±—É–µ–º -pl –≤ slug –ò –∏—Å–∫–ª—é—á–∞–µ–º –∫–∏—Ä–∏–ª–ª–∏—Ü—É
+      const hasRussian = hasCyrillic(contentToCheck);
+      
+      if (hasRussian) {
+        console.log(`üö´ Excluded from PL: ${article.slug} (contains Cyrillic)`);
+        return false;
+      }
+      
+      const isPolish = slugContainsLocale && !hasRussian;
+      
+      if (isPolish) {
+        console.log(`‚úÖ Article matched for PL: ${article.slug}`);
+      }
+      return isPolish;
+    }
+    
+    return false;
+  });
   
-  // –î–ª—è –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
-  console.warn(`Unsupported locale: ${locale}. Supported: 'en', 'pl' only.`);
-  return [];
+  console.log(`üìä Filtered ${filtered.length}/${articles.length} articles for ${locale}`);
+  return filtered;
 }
 
 // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ WordPress –∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
@@ -132,13 +179,14 @@ export async function getAllPosts(limit = 12, locale = 'en'): Promise<Post[]> {
     }
     
     // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ WordPress API –≤ —Ñ–æ—Ä–º–∞—Ç Post
+    // –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è image –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ undefined –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã fallback
     const wpPosts: Post[] = data.articles.map((article: any) => ({
       slug: article.slug,
       title: strip(article.title) || "Untitled",
       excerpt: strip(article.excerpt),
       date: article.date,
       publishedAt: article.date,
-      image: article.image || "",
+      image: article.image && article.image.trim() !== '' ? article.image : '',
       category: article.categories?.nodes?.[0] || { name: "General", slug: "general" },
       contentHtml: article.content || "",
     }));
diff --git a/lib/unified-article-service.ts b/lib/unified-article-service.ts
index 40b3e85..911ab01 100644
--- a/lib/unified-article-service.ts
+++ b/lib/unified-article-service.ts
@@ -603,7 +603,10 @@ class UnifiedArticleService {
         
         // –°–ø–∏—Å–∫–∏ (–º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
         if (paragraph.includes('\n- ') || paragraph.startsWith('- ')) {
-          const items = paragraph.split('\n- ').map(item => item.startsWith('- ') ? item.substring(2) : item);
+          // –£–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π "- " –µ—Å–ª–∏ –µ—Å—Ç—å
+          let listText = paragraph.startsWith('- ') ? paragraph.substring(2) : paragraph;
+          // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ "\n- " –∏ –æ—á–∏—â–∞–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
+          const items = listText.split('\n- ').map(item => item.trim()).filter(item => item.length > 0);
           const listItems = items.map(item => `<li>${this.formatInlineElements(item)}</li>`).join('');
           return `<ul>${listItems}</ul>`;
         }
@@ -647,7 +650,11 @@ class UnifiedArticleService {
    * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ inline —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–∂–∏—Ä–Ω—ã–π, –∫—É—Ä—Å–∏–≤, —Å—Å—ã–ª–∫–∏, –∫–æ–¥)
    */
   private formatInlineElements(text: string): string {
-    return text
+    // –°–Ω–∞—á–∞–ª–∞ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML (—Ç–æ–ª—å–∫–æ –≤ plain —Ç–µ–∫—Å—Ç–µ, –Ω–µ –≤ markdown —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–µ)
+    let result = text;
+    
+    // –ü—Ä–∏–º–µ–Ω—è–µ–º markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
+    result = result
       // –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç **bold**
       .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
       // –ö—É—Ä—Å–∏–≤ *italic*  
@@ -656,12 +663,10 @@ class UnifiedArticleService {
       .replace(/`([^`]+)`/g, '<code>$1</code>')
       // –°—Å—ã–ª–∫–∏ [text](url)
       .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank" rel="noopener noreferrer">$1</a>')
-      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏
-      .replace(/(https?:\/\/[^\s]+)/g, '<a href="$1" target="_blank" rel="noopener noreferrer">$1</a>')
-      // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML –≤ –æ—Å—Ç–∞–ª—å–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
-      .replace(/&(?![a-zA-Z][a-zA-Z0-9]*;)/g, '&amp;')
-      .replace(/</g, '&lt;')
-      .replace(/>/g, '&gt;');
+      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–≥–æ–≤)
+      .replace(/(?<!href=")(https?:\/\/[^\s<]+)/g, '<a href="$1" target="_blank" rel="noopener noreferrer">$1</a>');
+    
+    return result;
   }
   
   /**
