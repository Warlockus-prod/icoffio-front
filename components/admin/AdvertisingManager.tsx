'use client';

/**
 * AdvertisingManager - Real-time —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω—ã–º–∏ –º–µ—Å—Ç–∞–º–∏
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–∫–ª—é—á–∞—Ç—å/–≤—ã–∫–ª—é—á–∞—Ç—å, –º–µ–Ω—è—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –º–µ—Å—Ç–∞
 * 
 * @version 7.7.0
 * @date 2025-10-28
 */

import { useState, useEffect } from 'react';
import { AD_PLACEMENTS, AdPlacementConfig } from '@/lib/config/adPlacements';
import { 
  getAdPlacements,
  toggleAdPlacement,
  updateAdPriority,
  updateAdPlacement,
  addAdPlacement,
  deleteAdPlacement,
  resetToDefaults,
  hasCustomConfig,
  exportConfig,
  importConfig
} from '@/lib/config/adPlacementsManager';
import type { AdFormat, AdPlacement } from '@/components/UniversalAd';

export default function AdvertisingManager() {
  const [placements, setPlacements] = useState<AdPlacementConfig[]>([]);
  const [selectedDevice, setSelectedDevice] = useState<'all' | 'desktop' | 'mobile'>('all');
  const [searchQuery, setSearchQuery] = useState('');
  const [showAddForm, setShowAddForm] = useState(false);
  const [isCustomConfig, setIsCustomConfig] = useState(false);
  const [showExportModal, setShowExportModal] = useState(false);
  const [showImportModal, setShowImportModal] = useState(false);
  const [importText, setImportText] = useState('');
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  const loadPlacements = () => {
    const loaded = getAdPlacements();
    setPlacements(loaded);
    setIsCustomConfig(hasCustomConfig());
  };

  useEffect(() => {
    loadPlacements();

    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const handleUpdate = () => loadPlacements();
    window.addEventListener('adPlacementsUpdated', handleUpdate);
    return () => window.removeEventListener('adPlacementsUpdated', handleUpdate);
  }, []);

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const stats = {
    total: placements.length,
    enabled: placements.filter(ad => ad.enabled).length,
    disabled: placements.filter(ad => !ad.enabled).length,
    new: placements.filter(ad => ad.status === 'new').length,
    desktop: placements.filter(ad => ad.device === 'desktop').length,
    mobile: placements.filter(ad => ad.device === 'mobile').length,
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
  const getFilteredPlacements = () => {
    let filtered = placements;
    
    if (selectedDevice !== 'all') {
      filtered = filtered.filter(ad => 
        ad.device === selectedDevice || ad.device === 'both'
      );
    }
    
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      filtered = filtered.filter(ad =>
        ad.name.toLowerCase().includes(query) ||
        ad.description.toLowerCase().includes(query) ||
        ad.placeId.toLowerCase().includes(query)
      );
    }
    
    return filtered.sort((a, b) => b.priority - a.priority);
  };

  const filteredPlacements = getFilteredPlacements();

  // Toggle enabled/disabled
  const handleToggle = (id: string) => {
    const success = toggleAdPlacement(id);
    if (success) {
      loadPlacements();
      showToast('‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    }
  };

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
  const handlePriorityChange = (id: string, priority: number) => {
    const success = updateAdPriority(id, priority);
    if (success) {
      loadPlacements();
    }
  };

  // –°–±—Ä–æ—Å –∫ –¥–µ—Ñ–æ–ª—Ç—É
  const handleReset = () => {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç —Å–±—Ä–æ—à–µ–Ω—ã –∫ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.')) {
      const success = resetToDefaults();
      if (success) {
        loadPlacements();
        showToast('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞ –∫ –¥–µ—Ñ–æ–ª—Ç—É');
      }
    }
  };

  // Export
  const handleExport = () => {
    const config = exportConfig();
    navigator.clipboard.writeText(config);
    showToast('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
    setShowExportModal(true);
  };

  // Import
  const handleImport = () => {
    try {
      const success = importConfig(importText);
      if (success) {
        loadPlacements();
        setShowImportModal(false);
        setImportText('');
        showToast('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞');
      } else {
        showToast('‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON', true);
      }
    } catch (error) {
      showToast('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞', true);
    }
  };

  // Toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const showToast = (message: string, isError = false) => {
    // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è toast
    const toast = document.createElement('div');
    toast.textContent = message;
    toast.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 16px 24px;
      background: ${isError ? '#ef4444' : '#10b981'};
      color: white;
      border-radius: 8px;
      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
      z-index: 10000;
      font-weight: 500;
    `;
    document.body.appendChild(toast);
    setTimeout(() => toast.remove(), 3000);
  };

  // –¶–≤–µ—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
  const getStatusBadge = (status: AdPlacementConfig['status']) => {
    switch (status) {
      case 'stable':
        return <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200">‚úÖ Stable</span>;
      case 'new':
        return <span className="px-2 py-1 text-xs rounded-full bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">üÜï New</span>;
      case 'testing':
        return <span className="px-2 py-1 text-xs rounded-full bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200">üß™ Testing</span>;
    }
  };

  // –ò–∫–æ–Ω–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  const getDeviceIcon = (device: string) => {
    switch (device) {
      case 'desktop': return 'üñ•Ô∏è';
      case 'mobile': return 'üì±';
      case 'both': return 'üñ•Ô∏èüì±';
      default: return 'üì±';
    }
  };

  // –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
  const copyCode = (placeId: string, format: string, placement: string) => {
    const code = `<UniversalAd 
  placeId="${placeId}" 
  format="${format}"
  placement="${placement}"
/>`;
    navigator.clipboard.writeText(code);
    showToast('üìã –ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω');
  };

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700">
        <div className="flex items-center justify-between mb-6">
          <div>
            <h2 className="text-2xl font-bold text-gray-900 dark:text-white flex items-center gap-2">
              üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–æ–π {isCustomConfig && <span className="text-sm text-blue-600 dark:text-blue-400">(Custom Config)</span>}
            </h2>
            <p className="text-gray-600 dark:text-gray-400 mt-1">
              Real-time —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ —Ä–µ–∫–ª–∞–º–Ω—ã–º–∏ –º–µ—Å—Ç–∞–º–∏ —á–µ—Ä–µ–∑ localStorage
            </p>
          </div>
          <div className="flex gap-2">
            <button 
              onClick={() => setShowAddForm(true)}
              className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors flex items-center gap-2"
            >
              ‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ
            </button>
            <button 
              onClick={handleExport}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2"
            >
              üì§ Export
            </button>
            <button 
              onClick={() => setShowImportModal(true)}
              className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors flex items-center gap-2"
            >
              üì• Import
            </button>
            {isCustomConfig && (
              <button 
                onClick={handleReset}
                className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors flex items-center gap-2"
              >
                üîÑ Reset
              </button>
            )}
          </div>
        </div>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <div className="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg">
            <div className="text-2xl font-bold text-gray-900 dark:text-white">{stats.total}</div>
            <div className="text-sm text-gray-600 dark:text-gray-400">–í—Å–µ–≥–æ –º–µ—Å—Ç</div>
          </div>
          <div className="bg-green-50 dark:bg-green-900/20 p-4 rounded-lg">
            <div className="text-2xl font-bold text-green-700 dark:text-green-400">{stats.enabled}</div>
            <div className="text-sm text-gray-600 dark:text-gray-400">–ê–∫—Ç–∏–≤–Ω–æ</div>
          </div>
          <div className="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg">
            <div className="text-2xl font-bold text-gray-900 dark:text-white">{stats.disabled}</div>
            <div className="text-sm text-gray-600 dark:text-gray-400">–û—Ç–∫–ª—é—á–µ–Ω–æ</div>
          </div>
          <div className="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg">
            <div className="text-2xl font-bold text-blue-700 dark:text-blue-400">{stats.new}</div>
            <div className="text-sm text-gray-600 dark:text-gray-400">–ù–æ–≤—ã—Ö</div>
          </div>
        </div>
      </div>

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <div className="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700">
        <div className="flex flex-col md:flex-row gap-4">
          <div className="flex-1">
            <input
              type="text"
              placeholder="üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –æ–ø–∏—Å–∞–Ω–∏—é –∏–ª–∏ PlaceID..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500"
            />
          </div>

          <div className="flex gap-2">
            <button
              onClick={() => setSelectedDevice('all')}
              className={`px-4 py-2 rounded-lg transition-colors ${
                selectedDevice === 'all'
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'
              }`}
            >
              –í—Å–µ
            </button>
            <button
              onClick={() => setSelectedDevice('desktop')}
              className={`px-4 py-2 rounded-lg transition-colors ${
                selectedDevice === 'desktop'
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'
              }`}
            >
              üñ•Ô∏è Desktop
            </button>
            <button
              onClick={() => setSelectedDevice('mobile')}
              className={`px-4 py-2 rounded-lg transition-colors ${
                selectedDevice === 'mobile'
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'
              }`}
            >
              üì± Mobile
            </button>
          </div>
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –º–µ—Å—Ç */}
      <div className="space-y-4">
        {filteredPlacements.map((ad) => (
          <div
            key={ad.id}
            className={`bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border-2 transition-all ${
              ad.enabled
                ? 'border-green-300 dark:border-green-700'
                : 'border-gray-200 dark:border-gray-700 opacity-60'
            }`}
          >
            <div className="flex items-start justify-between gap-4">
              {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
              <div className="flex-1">
                <div className="flex items-center gap-3 mb-3">
                  <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                    {getDeviceIcon(ad.device)} {ad.name}
                  </h3>
                  {getStatusBadge(ad.status)}
                  
                  {/* Toggle Switch */}
                  <label className="relative inline-flex items-center cursor-pointer">
                    <input
                      type="checkbox"
                      checked={ad.enabled}
                      onChange={() => handleToggle(ad.id)}
                      className="sr-only peer"
                    />
                    <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-green-600"></div>
                    <span className="ms-3 text-sm font-medium text-gray-900 dark:text-gray-300">
                      {ad.enabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω–æ' : '‚è∏Ô∏è –û—Ç–∫–ª—é—á–µ–Ω–æ'}
                    </span>
                  </label>
                </div>

                <p className="text-gray-600 dark:text-gray-400 mb-4">
                  {ad.description}
                </p>

                {/* –î–µ—Ç–∞–ª–∏ */}
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm mb-4">
                  <div>
                    <span className="text-gray-500 dark:text-gray-400">–§–æ—Ä–º–∞—Ç:</span>
                    <div className="font-mono font-semibold text-gray-900 dark:text-white">{ad.format}</div>
                  </div>
                  <div>
                    <span className="text-gray-500 dark:text-gray-400">PlaceID:</span>
                    <div className="font-mono text-xs text-gray-900 dark:text-white truncate">{ad.placeId}</div>
                  </div>
                  <div>
                    <span className="text-gray-500 dark:text-gray-400">–ü–æ–∑–∏—Ü–∏—è:</span>
                    <div className="font-semibold text-gray-900 dark:text-white">{ad.position}</div>
                  </div>
                  <div>
                    <span className="text-gray-500 dark:text-gray-400">–õ–æ–∫–∞—Ü–∏—è:</span>
                    <div className="font-semibold text-gray-900 dark:text-white">{ad.location}</div>
                  </div>
                </div>

                {/* –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç Slider */}
                <div className="mb-2">
                  <div className="flex items-center justify-between mb-2">
                    <label className="text-sm font-medium text-gray-700 dark:text-gray-300">
                      –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: <span className="text-blue-600 dark:text-blue-400 font-bold">{ad.priority}/10</span>
                    </label>
                  </div>
                  <input
                    type="range"
                    min="1"
                    max="10"
                    value={ad.priority}
                    onChange={(e) => handlePriorityChange(ad.id, parseInt(e.target.value))}
                    className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700"
                  />
                </div>
              </div>

              {/* –î–µ–π—Å—Ç–≤–∏—è */}
              <div className="flex flex-col gap-2">
                <button
                  onClick={() => copyCode(ad.placeId, ad.format, ad.placement)}
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm"
                  title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"
                >
                  üìã –ö–æ–¥
                </button>
                <button
                  className="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors text-sm"
                  title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Å–∫–æ—Ä–æ)"
                  disabled
                >
                  üìä Stats
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ */}
      {filteredPlacements.length === 0 && (
        <div className="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-700 rounded-xl p-6 text-center">
          <p className="text-yellow-800 dark:text-yellow-200">
            ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –º–µ—Å—Ç –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º
          </p>
        </div>
      )}

      {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è */}
      <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-700 rounded-xl p-6">
        <h3 className="text-lg font-semibold text-blue-900 dark:text-blue-200 mb-3">
          ‚ÑπÔ∏è –ö–∞–∫ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ–∫–ª–∞–º–æ–π (v7.7.0)
        </h3>
        <ul className="space-y-2 text-blue-800 dark:text-blue-300">
          <li><strong>Toggle –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å:</strong> –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –º–µ—Å—Ç–æ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ</li>
          <li><strong>–°–ª–∞–π–¥–µ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞:</strong> –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç 1 –¥–æ 10</li>
          <li><strong>‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ:</strong> –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Ä–µ–∫–ª–∞–º–Ω–æ–µ –º–µ—Å—Ç–æ</li>
          <li><strong>üì§ Export:</strong> –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ JSON</li>
          <li><strong>üì• Import:</strong> –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ JSON</li>
          <li><strong>üîÑ Reset:</strong> –°–±—Ä–æ—Å–∏—Ç—å –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º</li>
          <li><strong>üíæ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ:</strong> –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ localStorage –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</li>
        </ul>
      </div>

      {/* Export Modal */}
      {showExportModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50" onClick={() => setShowExportModal(false)}>
          <div className="bg-white dark:bg-gray-800 rounded-xl p-6 max-w-2xl w-full mx-4" onClick={(e) => e.stopPropagation()}>
            <h3 className="text-xl font-bold mb-4 text-gray-900 dark:text-white">üì§ Export –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</h3>
            <textarea
              readOnly
              value={exportConfig()}
              className="w-full h-64 p-4 border border-gray-300 dark:border-gray-600 rounded-lg bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-white font-mono text-sm"
            />
            <div className="flex gap-2 mt-4">
              <button
                onClick={() => {
                  navigator.clipboard.writeText(exportConfig());
                  showToast('üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
                }}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
              >
                üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
              </button>
              <button
                onClick={() => setShowExportModal(false)}
                className="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700"
              >
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Import Modal */}
      {showImportModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50" onClick={() => setShowImportModal(false)}>
          <div className="bg-white dark:bg-gray-800 rounded-xl p-6 max-w-2xl w-full mx-4" onClick={(e) => e.stopPropagation()}>
            <h3 className="text-xl font-bold mb-4 text-gray-900 dark:text-white">üì• Import –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</h3>
            <textarea
              value={importText}
              onChange={(e) => setImportText(e.target.value)}
              placeholder="–í—Å—Ç–∞–≤—å—Ç–µ JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é..."
              className="w-full h-64 p-4 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-900 text-gray-900 dark:text-white font-mono text-sm"
            />
            <div className="flex gap-2 mt-4">
              <button
                onClick={handleImport}
                className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700"
              >
                ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
              </button>
              <button
                onClick={() => {
                  setShowImportModal(false);
                  setImportText('');
                }}
                className="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
