'use client';

import { useAdminStore } from '@/lib/stores/admin-store';
import { formatDistanceToNow } from 'date-fns';
import { ru } from 'date-fns/locale';

const STATUS_CONFIG = {
  pending: {
    label: '–í –æ–∂–∏–¥–∞–Ω–∏–∏',
    icon: '‚è≥',
    color: 'bg-yellow-50 dark:bg-yellow-900/20 text-yellow-700 dark:text-yellow-300 border-yellow-200 dark:border-yellow-800',
    progress: 0
  },
  parsing: {
    label: '–ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
    icon: 'üîç',
    color: 'bg-blue-50 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300 border-blue-200 dark:border-blue-800',
    progress: 25
  },
  ai_processing: {
    label: '–ò–ò –æ–±—Ä–∞–±–æ—Ç–∫–∞',
    icon: 'ü§ñ',
    color: 'bg-purple-50 dark:bg-purple-900/20 text-purple-700 dark:text-purple-300 border-purple-200 dark:border-purple-800',
    progress: 50
  },
  translating: {
    label: '–ü–µ—Ä–µ–≤–æ–¥ EN/PL',
    icon: 'üåç',
    color: 'bg-indigo-50 dark:bg-indigo-900/20 text-indigo-700 dark:text-indigo-300 border-indigo-200 dark:border-indigo-800',
    progress: 75
  },
  images: {
    label: '–ü–æ–¥–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
    icon: 'üñºÔ∏è',
    color: 'bg-cyan-50 dark:bg-cyan-900/20 text-cyan-700 dark:text-cyan-300 border-cyan-200 dark:border-cyan-800',
    progress: 90
  },
  ready: {
    label: '–ì–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏',
    icon: '‚úÖ',
    color: 'bg-green-50 dark:bg-green-900/20 text-green-700 dark:text-green-300 border-green-200 dark:border-green-800',
    progress: 100
  },
  published: {
    label: '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ',
    icon: 'üì∞',
    color: 'bg-emerald-50 dark:bg-emerald-900/20 text-emerald-700 dark:text-emerald-300 border-emerald-200 dark:border-emerald-800',
    progress: 100
  },
  failed: {
    label: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏',
    icon: '‚ùå',
    color: 'bg-red-50 dark:bg-red-900/20 text-red-700 dark:text-red-300 border-red-200 dark:border-red-800',
    progress: 0
  }
};

export default function ParsingQueue() {
  const { parsingQueue, removeJobFromQueue, updateJobStatus } = useAdminStore();

  const handleRetry = (jobId: string, url: string, category: string = 'tech') => {
    updateJobStatus(jobId, 'pending', 0);
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
    setTimeout(() => {
      (useAdminStore.getState() as any).startParsing(jobId, url, category);
    }, 1000);
  };

  const handleRemove = (jobId: string) => {
    if (window.confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç URL –∏–∑ –æ—á–µ—Ä–µ–¥–∏?')) {
      removeJobFromQueue(jobId);
    }
  };

  // ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö failed —Å—Ç–∞—Ç–µ–π
  const handleClearFailed = () => {
    const failedJobs = parsingQueue.filter(job => job.status === 'failed');
    if (failedJobs.length === 0) return;
    
    if (window.confirm(`–£–¥–∞–ª–∏—Ç—å –≤—Å–µ ${failedJobs.length} –æ—à–∏–±–æ—á–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏?`)) {
      failedJobs.forEach(job => removeJobFromQueue(job.id));
    }
  };

  // ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: Force retry –¥–ª—è –∑–∞–≤–∏—Å—à–∏—Ö —Å—Ç–∞—Ç–µ–π
  const handleForceRetryStuck = () => {
    const stuckJobs = parsingQueue.filter(job => 
      ['parsing', 'ai_processing', 'translating', 'images'].includes(job.status) &&
      (Date.now() - new Date(job.startTime).getTime()) > 300000 // –±–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç
    );
    
    if (stuckJobs.length === 0) return;
    
    if (window.confirm(`–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å ${stuckJobs.length} –∑–∞–≤–∏—Å—à–∏—Ö —Å—Ç–∞—Ç–µ–π?`)) {
      stuckJobs.forEach(job => {
        updateJobStatus(job.id, 'failed', 0);
        setTimeout(() => {
          const isTextJob = job.url.startsWith('text:');
          if (isTextJob) {
            // –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –ø—Ä–æ—Å—Ç–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ failed —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            updateJobStatus(job.id, 'failed', 0);
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —á–µ—Ä–µ–∑ activity
            useAdminStore.getState().addActivity({
              type: 'parsing_failed',
              message: `–¢–µ–∫—Å—Ç–æ–≤–∞—è —Å—Ç–∞—Ç—å—è –∑–∞–≤–∏—Å–ª–∞ –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç: ${job.url.replace('text:', '')}`,
              url: job.url
            });
          } else {
            handleRetry(job.id, job.url);
          }
        }, 1000);
      });
    }
  };

  if (parsingQueue.length === 0) {
    return (
      <div className="bg-white dark:bg-gray-800 rounded-xl p-8 shadow-sm border border-gray-200 dark:border-gray-700">
        <div className="text-center">
          <div className="text-4xl mb-4">üì≠</div>
          <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
            –û—á–µ—Ä–µ–¥—å –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—É—Å—Ç–∞
          </h3>
          <p className="text-gray-500 dark:text-gray-400 text-sm">
            –î–æ–±–∞–≤—å—Ç–µ URL —Å—Ç–∞—Ç–µ–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700">
      <div className="mb-6 flex items-center justify-between">
        <div>
          <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-1 flex items-center gap-2">
            üìä Parsing Queue
          </h3>
          <p className="text-gray-600 dark:text-gray-400 text-sm">
            {parsingQueue.length} URL –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
          </p>
        </div>
        
        <div className="flex items-center gap-3">
          {/* Stats */}
          <div className="text-right mr-4">
            <div className="text-sm text-gray-500 dark:text-gray-400">
              Active: {parsingQueue.filter(job => ['parsing', 'ai_processing', 'translating', 'images'].includes(job.status)).length}
            </div>
            <div className="text-sm text-gray-500 dark:text-gray-400">
              Ready: {parsingQueue.filter(job => job.status === 'ready').length}
            </div>
          </div>
          
          {/* ‚úÖ –ù–û–í–´–ï –ö–ù–û–ü–ö–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø */}
          <div className="flex items-center gap-2">
            {/* Clear Failed Button */}
            {parsingQueue.filter(job => job.status === 'failed').length > 0 && (
              <button
                onClick={handleClearFailed}
                className="px-3 py-2 text-xs bg-red-50 dark:bg-red-900/20 text-red-600 dark:text-red-400 hover:bg-red-100 dark:hover:bg-red-900/40 rounded-lg border border-red-200 dark:border-red-800 transition-colors flex items-center gap-1"
                title={`–£–¥–∞–ª–∏—Ç—å –≤—Å–µ ${parsingQueue.filter(job => job.status === 'failed').length} failed —Å—Ç–∞—Ç–µ–π`}
              >
                üóëÔ∏è Clear Failed
              </button>
            )}
            
            {/* Force Retry Stuck Button */}
            {parsingQueue.filter(job => 
              ['parsing', 'ai_processing', 'translating', 'images'].includes(job.status) &&
              (Date.now() - new Date(job.startTime).getTime()) > 300000
            ).length > 0 && (
              <button
                onClick={handleForceRetryStuck}
                className="px-3 py-2 text-xs bg-orange-50 dark:bg-orange-900/20 text-orange-600 dark:text-orange-400 hover:bg-orange-100 dark:hover:bg-orange-900/40 rounded-lg border border-orange-200 dark:border-orange-800 transition-colors flex items-center gap-1"
                title="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–≤–∏—Å—à–∏–µ —Å—Ç–∞—Ç—å–∏ (>5 –º–∏–Ω)"
              >
                üîÑ Fix Stuck
              </button>
            )}
          </div>
        </div>
      </div>

      <div className="space-y-4">
        {parsingQueue.map((job) => {
          const statusConfig = STATUS_CONFIG[job.status];
          const timeAgo = formatDistanceToNow(new Date(job.startTime), { 
            addSuffix: true, 
            locale: ru 
          });

          return (
            <div
              key={job.id}
              className="border border-gray-200 dark:border-gray-600 rounded-lg p-4 hover:shadow-md transition-shadow"
            >
              {/* Header */}
              <div className="flex items-start justify-between mb-3">
                <div className="flex-1 min-w-0">
                  <div className="flex items-center gap-2 mb-1">
                    <span className="text-lg">{statusConfig.icon}</span>
                    <span className={`px-3 py-1 rounded-full text-xs font-medium border ${statusConfig.color}`}>
                      {statusConfig.label}
                    </span>
                    <span className="text-xs text-gray-500 dark:text-gray-400">
                      {timeAgo}
                    </span>
                  </div>
                  
                  <div className="text-sm text-gray-900 dark:text-white font-medium truncate mb-1">
                    {new URL(job.url).hostname}
                  </div>
                  
                  <div className="text-xs text-gray-600 dark:text-gray-400 truncate">
                    {job.url}
                  </div>
                </div>

                {/* Actions */}
                <div className="flex items-center gap-2 ml-4">
                  {job.status === 'failed' && (
                    <button
                      onClick={() => handleRetry(job.id, job.url)}
                      className="px-3 py-1 text-xs bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400 hover:bg-blue-100 dark:hover:bg-blue-900/40 rounded transition-colors"
                      title="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å"
                    >
                      üîÑ Retry
                    </button>
                  )}
                  
                  {job.status === 'ready' && (
                    <button
                      className="px-3 py-1 text-xs bg-green-50 dark:bg-green-900/20 text-green-600 dark:text-green-400 hover:bg-green-100 dark:hover:bg-green-900/40 rounded transition-colors"
                      title="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
                    >
                      üëÅÔ∏è View
                    </button>
                  )}
                  
                  <button
                    onClick={() => handleRemove(job.id)}
                    className="px-3 py-1 text-xs bg-red-50 dark:bg-red-900/20 text-red-600 dark:text-red-400 hover:bg-red-100 dark:hover:bg-red-900/40 rounded transition-colors"
                    title="–£–¥–∞–ª–∏—Ç—å"
                  >
                    üóëÔ∏è
                  </button>
                </div>
              </div>

              {/* Progress Bar */}
              <div className="mb-3">
                <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
                  <div
                    className={`h-2 rounded-full transition-all duration-500 ${
                      job.status === 'failed' 
                        ? 'bg-red-500' 
                        : job.status === 'ready' || job.status === 'published'
                        ? 'bg-green-500'
                        : 'bg-gradient-to-r from-blue-500 to-purple-500'
                    }`}
                    style={{ width: `${job.progress}%` }}
                  />
                </div>
                <div className="flex justify-between text-xs text-gray-500 dark:text-gray-400 mt-1">
                  <span>Progress: {job.progress}%</span>
                  {job.endTime && (
                    <span>
                      Completed in {Math.round((new Date(job.endTime).getTime() - new Date(job.startTime).getTime()) / 1000)}s
                    </span>
                  )}
                </div>
              </div>

              {/* Error Message */}
              {job.status === 'failed' && job.error && (
                <div className="p-3 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg">
                  <div className="text-sm text-red-700 dark:text-red-300">
                    <strong>Error:</strong> {job.error}
                  </div>
                </div>
              )}

              {/* Article Preview */}
              {job.article && (
                <div className="mt-3 p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                  <div className="text-sm text-gray-900 dark:text-white font-medium mb-1">
                    üìÑ {job.article.title}
                  </div>
                  <div className="text-xs text-gray-600 dark:text-gray-400 line-clamp-2">
                    {job.article.excerpt}
                  </div>
                  <div className="flex items-center gap-4 mt-2 text-xs text-gray-500 dark:text-gray-400">
                    <span>üè∑Ô∏è {job.article.category}</span>
                    <span>‚úçÔ∏è {job.article.author}</span>
                    {Object.keys(job.article.translations || {}).length > 0 && (
                      <span>üåç +{Object.keys(job.article.translations || {}).length} translations</span>
                    )}
                  </div>
                </div>
              )}
            </div>
          );
        })}
      </div>

      {/* Queue Actions */}
      {parsingQueue.length > 0 && (
        <div className="mt-6 pt-4 border-t border-gray-200 dark:border-gray-600">
          <div className="flex items-center justify-between">
            <div className="text-sm text-gray-500 dark:text-gray-400">
              {parsingQueue.filter(job => job.status === 'ready').length} —Å—Ç–∞—Ç–µ–π –≥–æ—Ç–æ–≤—ã –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            </div>
            
            <div className="flex gap-2">
              <button
                onClick={() => {
                  const failedJobs = parsingQueue.filter(job => job.status === 'failed');
                  failedJobs.forEach(job => handleRetry(job.id, job.url));
                }}
                className="px-3 py-2 text-sm bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400 hover:bg-blue-100 dark:hover:bg-blue-900/40 rounded transition-colors"
                disabled={!parsingQueue.some(job => job.status === 'failed')}
              >
                üîÑ Retry Failed
              </button>
              
              <button
                onClick={() => {
                  if (window.confirm('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –æ—á–µ—Ä–µ–¥—å?')) {
                    parsingQueue.forEach(job => removeJobFromQueue(job.id));
                  }
                }}
                className="px-3 py-2 text-sm bg-red-50 dark:bg-red-900/20 text-red-600 dark:text-red-400 hover:bg-red-100 dark:hover:bg-red-900/40 rounded transition-colors"
              >
                üóëÔ∏è Clear All
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
