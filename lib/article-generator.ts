import { translationService } from './translation-service';
import type { Post } from './types';
import { addRuntimeArticle } from './local-articles';

interface ArticleInput {
  url?: string;
  title?: string;
  content?: string;
  category?: string;
  source?: string;
}

interface GeneratedArticle {
  title: string;
  excerpt: string;
  content: string;
  category: string;
  slug: string;
  images: string[];
}

class ArticleGenerator {
  private supportedLanguages = ['en', 'pl', 'de', 'ro', 'cs'];

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ URL (–±–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
  async extractContentFromUrl(url: string): Promise<ArticleInput> {
    console.log(`üåê –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ URL: ${url}`);
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ URL
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const domain = new URL(url).hostname;
    
    return {
      url,
      title: `–°—Ç–∞—Ç—å—è —Å ${domain}`,
      content: `–ö–æ–Ω—Ç–µ–Ω—Ç –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ ${url}. –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å–ª–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞.`,
      category: 'tech',
      source: domain
    };
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò
  async generateAdaptedContent(input: ArticleInput): Promise<GeneratedArticle> {
    console.log(`üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç...`);
    
    const prompt = this.createContentGenerationPrompt(input);
    
    try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'gpt-4o',
          messages: [{ role: 'user', content: prompt }],
          temperature: 0.7,
          max_tokens: 4000,
        }),
      });

      const data = await response.json();
      const generatedContent = data.choices?.[0]?.message?.content;

      if (!generatedContent) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç');
      }

      return this.parseGeneratedContent(generatedContent);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);
      
      // Fallback: —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      return {
        title: input.title || '–ù–æ–≤–∞—è —Å—Ç–∞—Ç—å—è',
        excerpt: '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏',
        content: input.content || '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏',
        category: input.category || 'tech',
        slug: this.createSlug(input.title || 'novaya-statya'),
        images: this.selectDefaultImages(input.category || 'tech')
      };
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  private createContentGenerationPrompt(input: ArticleInput): string {
    return `–°–æ–∑–¥–∞–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —Å—Ç–∞—Ç—å—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è —Å–∞–π—Ç–∞ icoffio.

–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
${input.url ? `URL: ${input.url}` : ''}
${input.title ? `–ó–∞–≥–æ–ª–æ–≤–æ–∫: ${input.title}` : ''}
${input.content ? `–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: ${input.content.slice(0, 2000)}...` : ''}
${input.category ? `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${input.category}` : ''}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
1. –ê–¥–∞–ø—Ç–∏—Ä—É–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–¥ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é
2. –°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç—å—é —Å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
3. –î–æ–±–∞–≤—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
4. –í–∫–ª—é—á–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ
5. –ò—Å–ø–æ–ª—å–∑—É–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "title": "–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏ (–ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∏ SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)",
  "excerpt": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ (150-200 —Å–∏–º–≤–æ–ª–æ–≤)",
  "content": "–ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π",
  "category": "ai|apple|games|tech",
  "slug": "url-friendly-slug",
  "images": ["image1.jpg", "image2.jpg", "image3.jpg"]
}

–í–∞–∂–Ω–æ: –ö–æ–Ω—Ç–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Å–∞–π—Ç–∞.`;
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  private parseGeneratedContent(content: string): GeneratedArticle {
    try {
      // –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const parsed = JSON.parse(jsonMatch[0]);
        return {
          title: parsed.title || '–ù–æ–≤–∞—è —Å—Ç–∞—Ç—å—è',
          excerpt: parsed.excerpt || '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
          content: parsed.content || '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏',
          category: parsed.category || 'tech',
          slug: parsed.slug || this.createSlug(parsed.title || 'novaya-statya'),
          images: parsed.images || this.selectDefaultImages(parsed.category || 'tech')
        };
      }
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
    }

    // Fallback –ø–∞—Ä—Å–∏–Ω–≥
    const lines = content.split('\n');
    const title = lines.find(line => line.includes('title'))?.replace(/.*title["']:?\s*["']?/, '').replace(/["'].*/, '') || '–ù–æ–≤–∞—è —Å—Ç–∞—Ç—å—è';
    
    return {
      title,
      excerpt: '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏',
      content: content,
      category: 'tech',
      slug: this.createSlug(title),
      images: this.selectDefaultImages('tech')
    };
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ slug –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
  private createSlug(title: string): string {
    return title
      .toLowerCase()
      .replace(/[^a-z–∞-—è0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .trim()
      .substring(0, 50); // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤
  }

  // –ü–æ–¥–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  private selectDefaultImages(category: string): string[] {
    const imageMap: Record<string, string[]> = {
      ai: [
        '/images/ai-technology.jpg',
        '/images/machine-learning.jpg',
        '/images/ai-future.jpg'
      ],
      apple: [
        '/images/apple-devices.jpg',
        '/images/iphone-technology.jpg',
        '/images/apple-innovation.jpg'
      ],
      games: [
        '/images/gaming-technology.jpg',
        '/images/game-development.jpg',
        '/images/gaming-industry.jpg'
      ],
      tech: [
        '/images/technology-innovation.jpg',
        '/images/tech-devices.jpg',
        '/images/digital-transformation.jpg'
      ]
    };

    return imageMap[category] || imageMap.tech;
  }

  // –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç–∞—Ç—å–∏ –Ω–∞ –≤—Å–µ —è–∑—ã–∫–∏
  async translateArticle(article: GeneratedArticle): Promise<Record<string, GeneratedArticle>> {
    console.log(`üåê –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ç–∞—Ç—å—é "${article.title}" –Ω–∞ ${this.supportedLanguages.length} —è–∑—ã–∫–æ–≤...`);
    
    const translations: Record<string, GeneratedArticle> = {};

    for (const language of this.supportedLanguages) {
      try {
        console.log(`üîÑ –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ ${language}...`);
        
        const translatedContent = await translationService.translateContent(
          {
            title: article.title,
            excerpt: article.excerpt,
            body: article.content
          },
          language
        );

        translations[language] = {
          ...article,
          title: translatedContent.title,
          excerpt: translatedContent.excerpt,
          content: translatedContent.body,
        };

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ ${language}:`, error);
        
        // Fallback –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—É
        translations[language] = article;
      }
    }

    return translations;
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ Post –æ–±—ä–µ–∫—Ç–∞
  private createPostObject(article: GeneratedArticle, language: string = 'ru'): Post {
    const now = new Date();
    
    return {
      slug: `${article.slug}${language !== 'ru' ? `-${language}` : ''}`,
      title: article.title,
      excerpt: article.excerpt,
      date: now.toISOString(),
      publishedAt: now.toISOString(),
      image: article.images[0],
      imageAlt: article.title,
      category: { 
        name: this.getCategoryName(article.category), 
        slug: article.category 
      },
      images: article.images,
      contentHtml: this.wrapContentInProse(article.content)
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  private getCategoryName(slug: string): string {
    const categoryNames: Record<string, string> = {
      ai: 'AI',
      apple: 'Apple',
      games: 'Games',
      tech: 'Tech'
    };
    
    return categoryNames[slug] || 'Tech';
  }

  // –û–±–µ—Ä—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ prose —Å—Ç–∏–ª–∏
  private wrapContentInProse(content: string): string {
    if (content.includes('<div class="prose')) {
      return content;
    }

    return `<div class="prose prose-lg max-w-none">\n${content}\n</div>`;
  }

  // –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –ø–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—å–∏
  async processArticle(input: ArticleInput): Promise<Record<string, Post>> {
    try {
      console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç–∞—Ç—å–∏...`);
      
      // 1. –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
      let articleData = input;
      if (input.url && !input.content) {
        articleData = await this.extractContentFromUrl(input.url);
      }

      // 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
      const generatedArticle = await this.generateAdaptedContent(articleData);
      console.log(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç: "${generatedArticle.title}"`);

      // 3. –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –≤—Å–µ —è–∑—ã–∫–∏
      const translations = await this.translateArticle(generatedArticle);
      console.log(`‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –Ω–∞ ${Object.keys(translations).length} —è–∑—ã–∫–æ–≤`);

      // 4. –°–æ–∑–¥–∞–µ–º Post –æ–±—ä–µ–∫—Ç—ã
      const posts: Record<string, Post> = {};
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ä—É—Å—Å–∫—É—é –≤–µ—Ä—Å–∏—é
      posts['ru'] = this.createPostObject(generatedArticle, 'ru');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
      for (const [language, translatedArticle] of Object.entries(translations)) {
        posts[language] = this.createPostObject(translatedArticle, language);
      }

      console.log(`üéâ –°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞!`);
      return posts;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—å–∏:', error);
      throw error;
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏ –≤ —Å–∏—Å—Ç–µ–º—É (cloud-ready)
  async addArticleToSystem(posts: Record<string, Post>): Promise<void> {
    // –í cloud —Å—Ä–µ–¥–µ —Å—Ç–∞—Ç—å–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –ø—Ä—è–º–æ –≤ –ø–∞–º—è—Ç—å
    // –î–ª—è production –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å CMS –∏–ª–∏ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    
    for (const [language, post] of Object.entries(posts)) {
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ (–±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–ø–ª–æ—è)
      addRuntimeArticle(post);
      console.log(`üìù –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç—å—è "${post.title}" (${language})`);
    }

    // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å:
    // - Headless CMS (Strapi, Contentful)
    // - Database (PostgreSQL, MongoDB) 
    // - GitHub API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PR —Å –Ω–æ–≤–æ–π —Å—Ç–∞—Ç—å–µ–π
    // - n8n webhook –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
    
    console.log(`üöÄ –°—Ç–∞—Ç—å–∏ –≥–æ—Ç–æ–≤—ã –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ app.icoffio.com`);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è GitHub PR —Å –Ω–æ–≤–æ–π —Å—Ç–∞—Ç—å–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)
  async createGitHubPR(posts: Record<string, Post>): Promise<void> {
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ
    // —Å–æ–∑–¥–∞–Ω–∏—è Pull Request —Å –Ω–æ–≤–æ–π —Å—Ç–∞—Ç—å–µ–π –≤ GitHub
    console.log(`üîÑ GitHub integration not implemented yet`);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton
export const articleGenerator = new ArticleGenerator();

// –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export async function generateArticleFromUrl(url: string): Promise<Record<string, Post>> {
  return articleGenerator.processArticle({ url });
}

export async function generateArticleFromText(title: string, content: string, category?: string): Promise<Record<string, Post>> {
  return articleGenerator.processArticle({ title, content, category });
}