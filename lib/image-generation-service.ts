import OpenAI from 'openai';

// –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω—É–∂–µ–Ω)
let openaiInstance: OpenAI | null = null;

function getOpenAIClient(): OpenAI {
  if (!openaiInstance) {
    if (!process.env.OPENAI_API_KEY) {
      throw new Error('OpenAI API key not configured');
    }
    openaiInstance = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    });
  }
  return openaiInstance;
}

/**
 * –¢–∏–ø—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */
export type ImageSource = 'dalle' | 'unsplash' | 'custom';

/**
 * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export interface ImageGenerationParams {
  title: string;
  excerpt?: string;
  category?: string;
  style?: 'natural' | 'vivid';
  quality?: 'standard' | 'hd';
  size?: '1024x1024' | '1792x1024' | '1024x1792';
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export interface ImageGenerationResult {
  success: boolean;
  url?: string;
  error?: string;
  cost?: number;
  revisedPrompt?: string;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π prompt –¥–ª—è DALL-E 3
 */
function generateImagePrompt(params: ImageGenerationParams): string {
  const { title, excerpt, category } = params;
  
  // –ë–∞–∑–æ–≤—ã–π prompt —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Å—Ç–∞—Ç—å–∏
  let prompt = `Professional high-quality photograph for a tech journalism article titled "${title}".`;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ excerpt
  if (excerpt && excerpt.length > 20) {
    const excerptShort = excerpt.substring(0, 150);
    prompt += ` Context: ${excerptShort}`;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  if (category) {
    const categoryStyles: Record<string, string> = {
      'ai': 'futuristic AI concept, neural networks, digital technology',
      'apple': 'modern Apple product design, minimalist, sleek',
      'tech': 'cutting-edge technology, innovation, modern',
      'games': 'gaming environment, immersive, dynamic',
      'digital': 'digital transformation, connectivity, modern business',
      'news': 'breaking news, journalism, professional',
    };
    
    const style = categoryStyles[category.toLowerCase()] || 'modern technology';
    prompt += ` Style: ${style}, clean composition, professional lighting.`;
  } else {
    prompt += ' Style: modern tech journalism, 4K quality, photorealistic, professional.';
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (3:2 –¥–ª—è inimage —Ä–µ–∫–ª–∞–º—ã)
  prompt += ' No text, no watermarks, no logos. Horizontal landscape format (3:2 aspect ratio) suitable for article content with ad placement.';
  
  return prompt;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ DALL-E 3 API
 */
export async function generateArticleImage(
  params: ImageGenerationParams
): Promise<ImageGenerationResult> {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–∞
    if (!process.env.OPENAI_API_KEY) {
      return {
        success: false,
        error: 'OpenAI API key not configured. Please set OPENAI_API_KEY environment variable.',
      };
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π prompt
    const prompt = generateImagePrompt(params);
    
    console.log('üé® Generating image with DALL-E 3...');
    console.log('üìù Prompt:', prompt);
    
    // –ü–æ–ª—É—á–∞–µ–º OpenAI –∫–ª–∏–µ–Ω—Ç
    const openai = getOpenAIClient();
    
    // –í—ã–∑—ã–≤–∞–µ–º DALL-E 3 API
    const response = await openai.images.generate({
      model: 'dall-e-3',
      prompt: prompt,
      n: 1,
      size: params.size || '1792x1024', // Landscape format (–±–ª–∏–∑–∫–æ –∫ 3:2) –¥–ª—è inimage —Ä–µ–∫–ª–∞–º—ã
      quality: params.quality || 'hd',
      style: params.style || 'natural',
    });
    
    if (!response.data || response.data.length === 0) {
      return {
        success: false,
        error: 'No response data from DALL-E 3',
      };
    }
    
    const imageUrl = response.data[0]?.url;
    const revisedPrompt = response.data[0]?.revised_prompt;
    
    if (!imageUrl) {
      return {
        success: false,
        error: 'No image URL returned from DALL-E 3',
      };
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    const cost = params.quality === 'hd' ? 0.08 : 0.04; // DALL-E 3 pricing
    
    console.log('‚úÖ Image generated successfully!');
    console.log('üîó URL:', imageUrl);
    console.log('üí∞ Cost: $' + cost.toFixed(2));
    
    return {
      success: true,
      url: imageUrl,
      cost,
      revisedPrompt,
    };
    
  } catch (error) {
    console.error('‚ùå DALL-E 3 generation error:', error);
    
    let errorMessage = 'Failed to generate image';
    
    if (error instanceof Error) {
      errorMessage = error.message;
    }
    
    return {
      success: false,
      error: errorMessage,
    };
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å—Ç–∞—Ç—å–∏
 * (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏)
 */
export async function generateMultipleImages(
  params: ImageGenerationParams,
  count: number = 3
): Promise<ImageGenerationResult[]> {
  const results: ImageGenerationResult[] = [];
  
  for (let i = 0; i < count; i++) {
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ prompts
    const modifiedParams = {
      ...params,
      title: `${params.title} - Illustration ${i + 1}`,
    };
    
    const result = await generateArticleImage(modifiedParams);
    results.push(result);
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    if (i < count - 1) {
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
  }
  
  return results;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ Unsplash (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)
 */
export async function getUnsplashImage(
  query: string,
  orientation: 'landscape' | 'portrait' | 'squarish' = 'landscape'
): Promise<ImageGenerationResult> {
  try {
    const unsplashAccessKey = process.env.UNSPLASH_ACCESS_KEY;
    
    if (!unsplashAccessKey) {
      // Fallback –∫ search-based URL –µ—Å–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–∞ (3:2 aspect ratio)
      const encodedQuery = encodeURIComponent(query);
      const url = `https://images.unsplash.com/photo-1?q=${encodedQuery}&w=1200&h=800&fit=crop`;
      
      return {
        success: true,
        url,
        cost: 0,
      };
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Unsplash API
    const response = await fetch(
      `https://api.unsplash.com/photos/random?query=${encodeURIComponent(query)}&orientation=${orientation}`,
      {
        headers: {
          Authorization: `Client-ID ${unsplashAccessKey}`,
        },
      }
    );
    
    if (!response.ok) {
      throw new Error(`Unsplash API error: ${response.statusText}`);
    }
    
    const data = await response.json();
    const url = `${data.urls.raw}&w=1200&h=800&fit=crop`; // 3:2 aspect ratio –¥–ª—è inimage
    
    return {
      success: true,
      url,
      cost: 0,
    };
    
  } catch (error) {
    console.error('Unsplash API error:', error);
    
    // Fallback –∫ –ø—Ä—è–º–æ–º—É URL
    const encodedQuery = encodeURIComponent(query);
    const url = `https://images.unsplash.com/photo-1?q=${encodedQuery}&w=1200&h=400&fit=crop`;
    
    return {
      success: true,
      url,
      cost: 0,
    };
  }
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ª—é–±–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
 * v7.8.0: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —É–º–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ —á–µ—Ä–µ–∑ AI
 */
export async function getArticleImage(
  source: ImageSource,
  params: ImageGenerationParams & { 
    unsplashTags?: string[]; 
    useSmartPrompts?: boolean;
    customQuery?: string;
  },
  customUrl?: string
): Promise<ImageGenerationResult> {
  switch (source) {
    case 'dalle':
      return generateArticleImage(params);
      
    case 'unsplash':
      let query: string;
      
      if (params.customQuery) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π query –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        query = params.customQuery;
      } else if (params.unsplashTags && params.unsplashTags.length > 0) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–≥–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
        query = params.unsplashTags.slice(0, 4).join(' ');
      } else if (params.useSmartPrompts) {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã —á–µ—Ä–µ–∑ AI
        try {
          const { generateSmartImagePrompts } = await import('./smart-image-prompt-generator');
          const smartPrompts = await generateSmartImagePrompts({
            title: params.title,
            content: params.excerpt || '',
            excerpt: params.excerpt || params.title,
            category: params.category || 'technology'
          });
          query = smartPrompts.heroPrompt;
          console.log('[ImageService] Generated smart prompt:', query);
        } catch (error) {
          console.warn('[ImageService] Smart prompts failed, using fallback');
          query = `${params.title} ${params.category || 'technology'}`;
        }
      } else {
        // Fallback –∫ –±–∞–∑–æ–≤–æ–º—É query
        query = `${params.title} ${params.category || 'technology'}`;
      }
      
      return getUnsplashImage(query);
      
    case 'custom':
      if (!customUrl) {
        return {
          success: false,
          error: 'Custom URL is required when using custom image source',
        };
      }
      return {
        success: true,
        url: customUrl,
        cost: 0,
      };
      
    default:
      return {
        success: false,
        error: `Unknown image source: ${source}`,
      };
  }
}

