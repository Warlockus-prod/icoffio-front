/**
 * üöÄ –ï–î–ò–ù–´–ô –°–ï–†–í–ò–° –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–¢–ê–¢–¨–Ø–ú–ò ICOFFIO
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è, –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞—Ç–µ–π
 */

import { translationService } from './translation-service';
import { copywritingService } from './copywriting-service';
import { imageService } from './image-service';
import { wordpressService } from './wordpress-service';
import { urlParserService } from './url-parser-service';
import { addRuntimeArticle } from './local-articles';
import type { Post } from './types';

// ========== –ò–ù–¢–ï–†–§–ï–ô–°–´ ==========

export interface ArticleInput {
  // –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  url?: string;
  title?: string;
  content?: string;
  
  // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  category?: 'ai' | 'apple' | 'games' | 'tech';
  author?: string;
  language?: string;
  
  // Telegram –¥–∞–Ω–Ω—ã–µ (–¥–ª—è n8n)
  chatId?: string;
  messageId?: string;
  
  // –û–ø—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
  enhanceContent?: boolean;
  generateImage?: boolean;
  translateToAll?: boolean;
  publishToWordPress?: boolean;
}

export interface ProcessedArticle {
  // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  id: string;
  title: string;
  content: string;
  excerpt: string;
  slug: string;
  
  // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  category: string;
  tags: string[];
  author: string;
  language: string;
  image?: string;
  metaDescription?: string;
  
  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
  createdAt: string;
  publishedAt?: string;
  
  // –ü–µ—Ä–µ–≤–æ–¥—ã
  translations: Record<string, {
    title: string;
    content: string;
    excerpt: string;
    slug: string;
  }>;
  
  // –ò—Å—Ç–æ—á–Ω–∏–∫
  source: {
    type: 'url' | 'manual' | 'telegram' | 'api';
    originalUrl?: string;
    chatId?: string;
    messageId?: string;
  };
}

export interface ProcessingResult {
  success: boolean;
  article?: ProcessedArticle;
  errors?: string[];
  warnings?: string[];
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  stats: {
    languagesProcessed: number;
    contentEnhanced: boolean;
    imageGenerated: boolean;
    publishedToWordPress: boolean;
    processingTimeMs: number;
  };
  
  // URLs
  urls?: Record<string, string>;
}

// ========== –û–°–ù–û–í–ù–û–ô –°–ï–†–í–ò–° ==========

class UnifiedArticleService {
  private supportedLanguages = ['en', 'pl', 'de', 'ro', 'cs'];
  
  /**
   * üéØ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø - –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—å–∏ –∏–∑ –ª—é–±–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
   */
  async processArticle(input: ArticleInput): Promise<ProcessingResult> {
    const startTime = Date.now();
    const errors: string[] = [];
    const warnings: string[] = [];
    
    try {
      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç–∞—Ç—å–∏:', {
        source: input.url ? 'URL' : (input.chatId ? 'Telegram' : 'Manual'),
        title: input.title?.substring(0, 50) + '...',
      });

      // 1. –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ò –ü–û–î–ì–û–¢–û–í–ö–ê –ö–û–ù–¢–ï–ù–¢–ê
      let articleData = await this.prepareArticleData(input);
      
      // 2. –£–õ–£–ß–®–ï–ù–ò–ï –ö–û–ù–¢–ï–ù–¢–ê (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
      if (input.enhanceContent !== false) {
        try {
          articleData = await this.enhanceArticleContent(articleData);
        } catch (error) {
          warnings.push(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }
      }
      
      // 3. –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)  
      if (input.generateImage !== false) {
        try {
          articleData.image = await this.generateArticleImage(articleData);
        } catch (error) {
          warnings.push(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }
      }
      
      // 4. –ü–ï–†–ï–í–û–î –ù–ê –í–°–ï –Ø–ó–´–ö–ò (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
      let translations: Record<string, any> = {};
      if (input.translateToAll !== false) {
        try {
          translations = await this.translateArticle(articleData);
        } catch (error) {
          warnings.push(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }
      }
      
      // 5. –°–û–ó–î–ê–ù–ò–ï –§–ò–ù–ê–õ–¨–ù–û–ì–û –û–ë–™–ï–ö–¢–ê –°–¢–ê–¢–¨–ò
      const processedArticle = this.createProcessedArticle(articleData, input, translations);
      
      // 6. –°–û–•–†–ê–ù–ï–ù–ò–ï –í –õ–û–ö–ê–õ–¨–ù–£–Æ –°–ò–°–¢–ï–ú–£
      await this.saveArticleLocally(processedArticle);
      
      // 7. –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –í WORDPRESS (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
      let publishedToWordPress = false;
      let urls: Record<string, string> = {};
      
      if (input.publishToWordPress !== false) {
        try {
          const publishResult = await this.publishToWordPress(processedArticle);
          publishedToWordPress = publishResult.success;
          urls = publishResult.urls || {};
          
          if (!publishResult.success) {
            warnings.push(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ WordPress: ${publishResult.error}`);
          }
        } catch (error) {
          warnings.push(`–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ WordPress: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }
      }
      
      // 8. –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–ê
      const processingTime = Date.now() - startTime;
      
      return {
        success: true,
        article: processedArticle,
        errors: errors.length > 0 ? errors : undefined,
        warnings: warnings.length > 0 ? warnings : undefined,
        stats: {
          languagesProcessed: Object.keys(translations).length + 1,
          contentEnhanced: input.enhanceContent !== false,
          imageGenerated: !!processedArticle.image,
          publishedToWordPress,
          processingTimeMs: processingTime
        },
        urls
      };
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—å–∏:', error);
      
      return {
        success: false,
        errors: [error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'],
        warnings,
        stats: {
          languagesProcessed: 0,
          contentEnhanced: false,
          imageGenerated: false,
          publishedToWordPress: false,
          processingTimeMs: Date.now() - startTime
        }
      };
    }
  }
  
  // ========== –ú–ï–¢–û–î–´ –û–ë–†–ê–ë–û–¢–ö–ò ==========
  
  /**
   * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—å–∏ –∏–∑ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  private async prepareArticleData(input: ArticleInput): Promise<any> {
    let title = input.title || '';
    let content = input.content || '';
    let category = input.category || 'tech';
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å URL - –∏–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    if (input.url) {
      try {
        const extracted = await this.extractContentFromUrl(input.url);
        title = extracted.title || title;
        content = extracted.content || content;
        category = extracted.category || category;
      } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ URL:', error);
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è fallback –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        // –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å—Ç–∞—Ç—å–∏ —Å –æ—à–∏–±–∫–∞–º–∏
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å URL: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!title && !content) {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏');
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if (!title && content) {
      title = content.split('\n')[0].substring(0, 100);
    }
    
    return {
      title,
      content,
      category,
      author: input.author || 'AI Assistant',
      language: input.language || 'ru'
    };
  }
  
  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ URL
   */
  private async extractContentFromUrl(url: string): Promise<any> {
    console.log(`üåê –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ URL: ${url}`);
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ URL
      const extractedContent = await urlParserService.extractContent(url);
      
      return {
        title: extractedContent.title,
        content: extractedContent.content,
        excerpt: extractedContent.excerpt,
        category: extractedContent.category,
        author: extractedContent.author || 'Web Content',
        publishedAt: extractedContent.publishedAt,
        image: extractedContent.image,
        source: extractedContent.source,
        siteName: extractedContent.siteName,
        language: extractedContent.language || 'ru',
        hasError: false // ‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ URL:', error);
      
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï —Å–æ–∑–¥–∞–µ–º fallback –∫–æ–Ω—Ç–µ–Ω—Ç, –∞ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      // –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å—Ç–∞—Ç–µ–π —Å –æ—à–∏–±–∫–∞–º–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const isHttpError = errorMessage.includes('403') || errorMessage.includes('404') || errorMessage.includes('HTTP');
      const isNetworkError = errorMessage.includes('fetch') || errorMessage.includes('ENOTFOUND');
      
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å ${url}: ${errorMessage}${
        isHttpError ? ' (–°–∞–π—Ç –±–ª–æ–∫–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞)' :
        isNetworkError ? ' (–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é –∏–ª–∏ URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)' :
        ' (–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞)'
      }`);
    }
  }
  
  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –¥–æ–º–µ–Ω—É
   */
  private categorizeFromDomain(domain: string): 'ai' | 'apple' | 'games' | 'tech' {
    if (domain.includes('apple') || domain.includes('macrumors') || domain.includes('9to5mac')) return 'apple';
    if (domain.includes('ai') || domain.includes('openai') || domain.includes('anthropic')) return 'ai';
    if (domain.includes('game') || domain.includes('steam') || domain.includes('ign')) return 'games';
    return 'tech';
  }
  
  /**
   * –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ AI
   */
  private async enhanceArticleContent(articleData: any): Promise<any> {
    if (!copywritingService.isAvailable()) {
      console.warn('‚ö†Ô∏è Copywriting service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–ª—É—á—à–µ–Ω–∏–µ');
      return articleData;
    }
    
    try {
      const enhanced = await copywritingService.enhanceContent({
        title: articleData.title,
        content: articleData.content,
        category: articleData.category,
        tone: 'professional',
        targetAudience: 'tech-enthusiasts',
        language: articleData.language
      });
      
      return {
        ...articleData,
        title: enhanced.title,
        content: enhanced.content,
        excerpt: enhanced.excerpt,
        tags: enhanced.tags,
        metaDescription: enhanced.metaDescription
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);
      throw error;
    }
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç—å–∏
   */
  private async generateArticleImage(articleData: any): Promise<string> {
    const availability = imageService.getAvailability();
    
    if (!availability.anyService) {
      console.warn('‚ö†Ô∏è Image service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º placeholder');
      return `https://picsum.photos/1200/630?random=${Date.now()}`;
    }
    
    try {
      const imageResult = await imageService.getImage({
        title: articleData.title,
        category: articleData.category,
        description: articleData.excerpt,
        style: 'modern',
        preferredSource: 'auto',
        dimensions: { width: 1200, height: 630 }
      });
      
      return imageResult.url;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
      throw error;
    }
  }
  
  /**
   * –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç–∞—Ç—å–∏ –Ω–∞ –≤—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏
   */
  private async translateArticle(articleData: any): Promise<Record<string, any>> {
    if (!translationService.isAvailable()) {
      console.warn('‚ö†Ô∏è Translation service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã');
      return {};
    }
    
    try {
      const translations = await translationService.translateToAllLanguages({
        title: articleData.title,
        excerpt: articleData.excerpt || articleData.content.substring(0, 200),
        body: articleData.content
      }, [articleData.language]); // –ò—Å–∫–ª—é—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º slug'–æ–≤
      const formattedTranslations: Record<string, any> = {};
      
      for (const [language, translation] of Object.entries(translations)) {
        if (translation && typeof translation === 'object') {
          const typedTranslation = translation as any;
          formattedTranslations[language] = {
            title: typedTranslation.title || articleData.title,
            content: typedTranslation.body || typedTranslation.content || articleData.content,
            excerpt: typedTranslation.excerpt || articleData.excerpt,
            slug: this.generateSlug(typedTranslation.title || articleData.title)
          };
        }
      }
      
      return formattedTranslations;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:', error);
      throw error;
    }
  }
  
  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç—å–∏
   */
  private createProcessedArticle(articleData: any, input: ArticleInput, translations: Record<string, any>): ProcessedArticle {
    const now = new Date().toISOString();
    const articleId = `article-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    
    return {
      id: articleId,
      title: articleData.title,
      content: articleData.content,
      excerpt: articleData.excerpt || articleData.content.substring(0, 200) + '...',
      slug: this.generateSlug(articleData.title),
      
      category: articleData.category,
      tags: articleData.tags || [articleData.category],
      author: articleData.author,
      language: articleData.language,
      image: articleData.image,
      metaDescription: articleData.metaDescription,
      
      createdAt: now,
      publishedAt: now,
      
      translations,
      
      source: {
        type: input.url ? 'url' : (input.chatId ? 'telegram' : 'manual'),
        originalUrl: input.url,
        chatId: input.chatId,
        messageId: input.messageId
      }
    };
  }
  
  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
   */
  private async saveArticleLocally(article: ProcessedArticle): Promise<void> {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç—å—é
      const mainPost: Post = {
        slug: article.slug,
        title: article.title,
        excerpt: article.excerpt,
        publishedAt: article.publishedAt || article.createdAt,
        image: article.image || '',
        category: {
          name: article.category,
          slug: article.category
        },
        content: article.content,
        contentHtml: this.formatContentToHtml(article.content)
      };
      
      addRuntimeArticle(mainPost);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
      for (const [lang, translation] of Object.entries(article.translations)) {
        const translatedPost: Post = {
          ...mainPost,
          slug: translation.slug,
          title: translation.title,
          excerpt: translation.excerpt,
          content: translation.content,
          contentHtml: this.formatContentToHtml(translation.content)
        };
        
        addRuntimeArticle(translatedPost);
      }
      
      console.log(`‚úÖ –°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ: ${article.title}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏ –ª–æ–∫–∞–ª—å–Ω–æ:', error);
      throw error;
    }
  }
  
  /**
   * –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ WordPress
   */
  private async publishToWordPress(article: ProcessedArticle): Promise<{success: boolean; urls?: Record<string, string>; error?: string}> {
    try {
      const isAvailable = await wordpressService.isAvailable();
      if (!isAvailable) {
        return {
          success: false,
          error: 'WordPress API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
        };
      }
      
      const result = await wordpressService.publishMultilingualArticle({
        id: article.id,
        title: article.title,
        content: article.content,
        excerpt: article.excerpt,
        slug: article.slug,
        category: article.category,
        tags: article.tags,
        image: article.image || '',
        author: article.author,
        language: article.language,
        metaDescription: article.metaDescription,
        publishedAt: article.publishedAt || article.createdAt
      }, article.translations);
      
      const urls: Record<string, string> = {};
      for (const res of result.results) {
        if (res.success && res.url) {
          urls[res.language] = res.url;
        }
      }
      
      return {
        success: result.success,
        urls: Object.keys(urls).length > 0 ? urls : undefined,
        error: result.success ? undefined : '–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å'
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  }
  
  // ========== –£–¢–ò–õ–ò–¢–´ ==========
  
  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è slug –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
   */
  private generateSlug(title: string): string {
    return title
      .toLowerCase()
      .replace(/[^\w\s\u0400-\u04FF]/g, '') // –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∏—Ä–∏–ª–ª–∏—Ü—É
      .replace(/\s+/g, '-')     // –ü—Ä–æ–±–µ–ª—ã –≤ –¥–µ—Ñ–∏—Å—ã
      .replace(/-+/g, '-')      // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã –≤ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ
      .trim()                   // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º
      .replace(/^-+|-+$/g, '')  // –£–±–∏—Ä–∞–µ–º –¥–µ—Ñ–∏—Å—ã –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ
      .substring(0, 50);
  }
  
  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ HTML —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Markdown
   */
  private formatContentToHtml(content: string): string {
    if (!content || typeof content !== 'string') {
      return '';
    }
    
    return content
      .split('\n\n')
      .map(paragraph => paragraph.trim())
      .filter(paragraph => paragraph.length > 0)
      .map(paragraph => {
        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ H1-H6
        if (paragraph.startsWith('# ')) {
          return `<h1>${this.escapeHtml(paragraph.substring(2))}</h1>`;
        }
        if (paragraph.startsWith('## ')) {
          return `<h2>${this.escapeHtml(paragraph.substring(3))}</h2>`;
        }
        if (paragraph.startsWith('### ')) {
          return `<h3>${this.escapeHtml(paragraph.substring(4))}</h3>`;
        }
        if (paragraph.startsWith('#### ')) {
          return `<h4>${this.escapeHtml(paragraph.substring(5))}</h4>`;
        }
        
        // –°–ø–∏—Å–∫–∏ (–º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
        if (paragraph.includes('\n- ') || paragraph.startsWith('- ')) {
          const items = paragraph.split('\n- ').map(item => item.startsWith('- ') ? item.substring(2) : item);
          const listItems = items.map(item => `<li>${this.formatInlineElements(item)}</li>`).join('');
          return `<ul>${listItems}</ul>`;
        }
        
        // –ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏  
        if (paragraph.match(/^\d+\.\s/)) {
          const items = paragraph.split(/\n\d+\.\s/).filter(item => item.trim());
          const firstItem = paragraph.match(/^\d+\.\s(.*)$/)?.[1];
          if (firstItem) items.unshift(firstItem);
          const listItems = items.map(item => `<li>${this.formatInlineElements(item)}</li>`).join('');
          return `<ol>${listItems}</ol>`;
        }
        
        // –¶–∏—Ç–∞—Ç—ã
        if (paragraph.startsWith('> ')) {
          const quote = paragraph.replace(/^>\s?/gm, '');
          return `<blockquote><p>${this.formatInlineElements(quote)}</p></blockquote>`;
        }
        
        // –ö–æ–¥ –±–ª–æ–∫–∏
        if (paragraph.startsWith('```')) {
          const lines = paragraph.split('\n');
          const language = lines[0].substring(3).trim();
          const code = lines.slice(1, -1).join('\n');
          const langClass = language ? ` class="language-${language}"` : '';
          return `<pre><code${langClass}>${this.escapeHtml(code)}</code></pre>`;
        }
        
        // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        if (paragraph.trim() === '---' || paragraph.trim() === '***') {
          return '<hr>';
        }
        
        // –û–±—ã—á–Ω—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã —Å inline —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        return `<p>${this.formatInlineElements(paragraph)}</p>`;
      })
      .join('\n');
  }
  
  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ inline —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–∂–∏—Ä–Ω—ã–π, –∫—É—Ä—Å–∏–≤, —Å—Å—ã–ª–∫–∏, –∫–æ–¥)
   */
  private formatInlineElements(text: string): string {
    return text
      // –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç **bold**
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      // –ö—É—Ä—Å–∏–≤ *italic*  
      .replace(/\*(.*?)\*/g, '<em>$1</em>')
      // Inline –∫–æ–¥ `code`
      .replace(/`([^`]+)`/g, '<code>$1</code>')
      // –°—Å—ã–ª–∫–∏ [text](url)
      .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank" rel="noopener noreferrer">$1</a>')
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏
      .replace(/(https?:\/\/[^\s]+)/g, '<a href="$1" target="_blank" rel="noopener noreferrer">$1</a>')
      // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML –≤ –æ—Å—Ç–∞–ª—å–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
      .replace(/&(?![a-zA-Z][a-zA-Z0-9]*;)/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;');
  }
  
  /**
   * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML —Å–∏–º–≤–æ–ª–æ–≤
   */
  private escapeHtml(text: string): string {
    return text
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#39;');
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
   */
  async checkServicesHealth(): Promise<{
    translation: boolean;
    copywriting: boolean;
    images: boolean;
    wordpress: boolean;
    urlParser: boolean;
  }> {
    const imageAvailability = imageService.getAvailability();
    const wpAvailable = await wordpressService.isAvailable();
    
    return {
      translation: translationService.isAvailable(),
      copywriting: copywritingService.isAvailable(),
      images: imageAvailability.anyService,
      wordpress: wpAvailable,
      urlParser: urlParserService.isAvailable()
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
export const unifiedArticleService = new UnifiedArticleService();
