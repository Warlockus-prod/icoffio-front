{
  "name": "Telegram → OpenAI → Images → WordPress → Sheets",
  "nodes": [
    {
      "parameters": {
        "path": "telegram_in",
        "methods": ["POST"],
        "responseMode": "onReceived",
        "responseData": "allEntries",
        "options": {}
      },
      "id": "Webhook_TG",
      "name": "Webhook: Telegram In",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [200, 300]
    },
    {
      "parameters": {
        "functionCode": "const secret = $headers[\"x-telegram-bot-api-secret-token\"];if (secret !== $env.TG_SECRET) {  return [{ json: { error: \"unauthorized\" }, pairedItem: { item: 0 }, response: { statusCode: 401 }}];}\nconst update = $json;const msg = update.message || update.edited_message || update.channel_post || {};const chatId = msg.chat?.id || msg.from?.id;const text = (msg.text || msg.caption || \"\").trim();const urlMatch = text.match(/https?:\\/\\/[^\\s]+/i);\nreturn [{  json: {    chat_id: chatId,    raw_text: text,    url: urlMatch ? urlMatch[0] : null,    is_url: !!urlMatch,    source_value: urlMatch ? urlMatch[0] : text  }}];"
      },
      "id": "Fn_ValidateExtract",
      "name": "Function: validate & extract",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [450, 300]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.is_url}}",
              "operation": "isTrue"
            }
          ]
        }
      },
      "id": "IF_isURL",
      "name": "IF: is URL?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [700, 300]
    },
    {
      "parameters": {
        "url": "={{$json.url}}",
        "options": {
          "responseFormat": "string",
          "ignoreResponseCode": true
        }
      },
      "id": "HTTP_FetchHTML",
      "name": "HTTP: Fetch HTML",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [950, 180]
    },
    {
      "parameters": {
        "functionCode": "const raw = typeof $json === 'string' ? $json : ($json.body || \"\");let s = raw.replace(/<script[\\s\\S]*?<\\/script>/gi,'').replace(/<style[\\s\\S]*?<\\/style>/gi,'').replace(/<!--[\\s\\S]*?-->/g,'');s = s.replace(/\\s+/g,' ');const text = s.replace(/<[^>]+>/g, ' ').replace(/\\s+/g,' ').trim();const limited = text.slice(0, 60000);return [{ json: { ...$prevNode[\"Function: validate & extract\"].json, text_plain: limited, html_raw_len: raw.length, source_type: \"url\" }}];"
      },
      "id": "Fn_CleanHtml",
      "name": "Function: cleanHtml",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [1200, 180]
    },
    {
      "parameters": {
        "functionCode": "return [{ json: { ...$prevNode[\"Function: validate & extract\"].json, source_type: \"text\", text_plain: $json.raw_text }}];"
      },
      "id": "Fn_PassText",
      "name": "Function: passThroughText",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [950, 420]
    },
    {
      "parameters": {
        "mode": "mergeByIndex"
      },
      "id": "Merge_URL_TEXT",
      "name": "Merge URL/TEXT",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [1450, 300]
    },
    {
      "parameters": {
        "mode": "chat",
        "chatModel": "gpt-4o-mini",
        "systemMessage": "You are a multilingual content processor for a tech news site. Return STRICT JSON only (no prose). Tasks:\\n1) If source_type==\"url\", treat text_plain as extracted raw text.\\n2) Normalize/rewrite (copywrite) the article: clear, concise, neutral; no hallucinations.\\n3) Produce 2 image prompts (\"hero\" and \"mid\") relevant to the article; avoid logos/brands.\\n4) Generate localizations for LANGS (from user prompt) with fields: lang, title, slug (kebab-case), excerpt (<=160 chars), tags (3-7, lowercase), content_html (semantic HTML; include placeholder [[MID_IMAGE]] mid-article), jsonld (Article minimal), hero_alt, mid_alt.\\nReturn JSON object: {\\n \"images\": {\"hero_prompt\":\"...\",\"mid_prompt\":\"...\"},\\n \"localizations\": [ {\"lang\":\"en\",\"title\":\"...\",\"slug\":\"...\",\"excerpt\":\"...\",\"tags\":[...],\"content_html\":\"...\",\"jsonld\":{...},\"hero_alt\":\"...\",\"mid_alt\":\"...\"}, ... ]\\n}\\nNo markdown, no backticks, no XML.",
        "messages": [
          {
            "text": "Source type: {{$json.source_type}}\\nSource value: {{$json.source_value}}\\n\\nNormalized text input (may be long):\\n{{$json.text_plain}}\\n\\nLANGS (comma-separated): {{ $env.TARGET_LANGS || \"en,pl,de,es,fr\" }}\\nPrimary topic: tech & startups\\nStyle: clear, neutral, helpful; no clickbait."
          }
        ],
        "options": {
          "responseFormat": "json"
        }
      },
      "id": "OpenAI_Processor",
      "name": "OpenAI: Processor",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 5,
      "position": [1700, 300],
      "credentials": {
        "openAiApi": {
          "id": "openai-api-default",
          "name": "OpenAI API (env)"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "const parsed = typeof $json === 'string' ? JSON.parse($json) : $json;const out = [];for (const loc of (parsed.localizations || [])) {  out.push({ json: {    ...$prevNode[\"Merge URL/TEXT\"].json,    ai: parsed,    loc  }});}return out;"
      },
      "id": "Fn_ExplodeLocs",
      "name": "Function: explodeLocalizations",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [1950, 300]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ !!$env.UNSPLASH_ACCESS_KEY }}",
              "operation": "isTrue"
            }
          ]
        }
      },
      "id": "IF_Unsplash",
      "name": "IF: Use Unsplash?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [2200, 300]
    },
    {
      "parameters": {
        "url": "https://api.unsplash.com/search/photos?query={{$json.loc.tags.slice(0,3).join(' ')}}&per_page=5",
        "options": {
          "responseFormat": "json",
          "headerParametersUi": {
            "parameter": [
              {
                "name": "Authorization",
                "value": "Client-ID {{$env.UNSPLASH_ACCESS_KEY}}"
              }
            ]
          }
        }
      },
      "id": "HTTP_Unsplash_Hero",
      "name": "Unsplash: Search hero",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [2450, 160]
    },
    {
      "parameters": {
        "functionCode": "const r = $json;const hero = r.results && r.results[0];return [{ json: { ...$prevNode[\"Function: explodeLocalizations\"].json, hero_url: hero?.urls?.regular, hero_user: hero?.user?.name, hero_link: hero?.links?.html } }];"
      },
      "id": "Fn_PickHero",
      "name": "Function: pickHero",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [2700, 160]
    },
    {
      "parameters": {
        "url": "={{$json.hero_url}}",
        "options": {
          "responseFormat": "file",
          "download": true
        }
      },
      "id": "HTTP_DownloadHero",
      "name": "HTTP: Download hero",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [2950, 160]
    },
    {
      "parameters": {
        "url": "https://api.unsplash.com/search/photos?query={{$json.loc.tags.slice(1,4).join(' ')}}&per_page=5",
        "options": {
          "responseFormat": "json",
          "headerParametersUi": {
            "parameter": [
              {
                "name": "Authorization",
                "value": "Client-ID {{$env.UNSPLASH_ACCESS_KEY}}"
              }
            ]
          }
        }
      },
      "id": "HTTP_Unsplash_Mid",
      "name": "Unsplash: Search mid",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [2450, 360]
    },
    {
      "parameters": {
        "functionCode": "const r = $json;const mid = r.results && (r.results[1] || r.results[0]);return [{ json: { ...$prevNode[\"Function: explodeLocalizations\"].json, mid_url: mid?.urls?.regular, mid_user: mid?.user?.name, mid_link: mid?.links?.html } }];"
      },
      "id": "Fn_PickMid",
      "name": "Function: pickMid",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [2700, 360]
    },
    {
      "parameters": {
        "url": "={{$json.mid_url}}",
        "options": {
          "responseFormat": "file",
          "download": true
        }
      },
      "id": "HTTP_DownloadMid",
      "name": "HTTP: Download mid",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [2950, 360]
    },
    {
      "parameters": {
        "url": "https://api.openai.com/v1/images/generations",
        "options": {
          "responseFormat": "json",
          "headerParametersUi": {
            "parameter": [
              { "name": "Authorization", "value": "Bearer {{$env.OPENAI_API_KEY}}" },
              { "name": "Content-Type", "value": "application/json" }
            ]
          },
          "bodyParametersUi": {
            "parameter": [
              { "name": "model", "value": "gpt-image-1" },
              { "name": "prompt", "value": "={{$json.ai.images.hero_prompt}}" },
              { "name": "size", "value": "1024x1024" }
            ]
          }
        }
      },
      "id": "HTTP_OpenAI_HeroGen",
      "name": "OpenAI Images: Hero (gen)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [2450, 520]
    },
    {
      "parameters": {
        "functionCode": "const b64 = $json.data?.[0]?.b64_json;const buf = Buffer.from(b64 || '', 'base64');return [{ json: { ...$prevNode[\"Function: explodeLocalizations\"].json }, binary: { hero: { data: buf, fileName: 'hero.jpg', mimeType: 'image/jpeg' } } }];"
      },
      "id": "Fn_HeroB64ToBin",
      "name": "Function: Hero b64→bin",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [2700, 520]
    },
    {
      "parameters": {
        "url": "https://api.openai.com/v1/images/generations",
        "options": {
          "responseFormat": "json",
          "headerParametersUi": {
            "parameter": [
              { "name": "Authorization", "value": "Bearer {{$env.OPENAI_API_KEY}}" },
              { "name": "Content-Type", "value": "application/json" }
            ]
          },
          "bodyParametersUi": {
            "parameter": [
              { "name": "model", "value": "gpt-image-1" },
              { "name": "prompt", "value": "={{$json.ai.images.mid_prompt}}" },
              { "name": "size", "value": "1024x1024" }
            ]
          }
        }
      },
      "id": "HTTP_OpenAI_MidGen",
      "name": "OpenAI Images: Mid (gen)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [2450, 700]
    },
    {
      "parameters": {
        "functionCode": "const b64 = $json.data?.[0]?.b64_json;const buf = Buffer.from(b64 || '', 'base64');return [{ json: { ...$prevNode[\"Function: explodeLocalizations\"].json }, binary: { mid: { data: buf, fileName: 'mid.jpg', mimeType: 'image/jpeg' } } }];"
      },
      "id": "Fn_MidB64ToBin",
      "name": "Function: Mid b64→bin",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [2700, 700]
    },
    {
      "parameters": {
        "url": "={{$env.WP_BASE}}/wp-json/wp/v2/media",
        "options": {
          "responseFormat": "json",
          "sendBinaryData": true,
          "headerParametersUi": {
            "parameter": [
              { "name": "Content-Disposition", "value": "attachment; filename=hero.jpg" },
              { "name": "Content-Type", "value": "image/jpeg" }
            ]
          }
        },
        "authentication": "basicAuth",
        "binaryPropertyName": "={{$binary.hero ? 'hero' : 'data'}}"
      },
      "id": "HTTP_WP_UploadHero",
      "name": "WP: Upload Media (hero)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [3200, 220],
      "credentials": {
        "httpBasicAuth": {
          "id": "wp-basic-auth",
          "name": "WordPress Basic (env)"
        }
      }
    },
    {
      "parameters": {
        "url": "={{$env.WP_BASE}}/wp-json/wp/v2/media",
        "options": {
          "responseFormat": "json",
          "sendBinaryData": true,
          "headerParametersUi": {
            "parameter": [
              { "name": "Content-Disposition", "value": "attachment; filename=mid.jpg" },
              { "name": "Content-Type", "value": "image/jpeg" }
            ]
          }
        },
        "authentication": "basicAuth",
        "binaryPropertyName": "={{$binary.mid ? 'mid' : 'data'}}"
      },
      "id": "HTTP_WP_UploadMid",
      "name": "WP: Upload Media (mid)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [3200, 420],
      "credentials": {
        "httpBasicAuth": {
          "id": "wp-basic-auth",
          "name": "WordPress Basic (env)"
        }
      }
    },
    {
      "parameters": {
        "mode": "mergeByIndex"
      },
      "id": "Merge_Media",
      "name": "Merge: media hero+mid",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [3450, 320]
    },
    {
      "parameters": {
        "functionCode": "const hero = $json;const mid = $prevNode[\"WP: Upload Media (mid)\"].json;const loc = $prevNode[\"Function: explodeLocalizations\"].json.loc;let html = loc.content_html || \"\";const midFig = `<figure><img src=\"${mid.source_url}\" alt=\"${(loc.mid_alt||'').replace(/\"/g,'&quot;')}\" loading=\"lazy\"></figure>`;html = html.replace('[[MID_IMAGE]]', midFig);const jsonldStr = JSON.stringify(loc.jsonld || {});html += `\\n<script type=\"application/ld+json\">${jsonldStr}</script>`;if ($env.UNSPLASH_ACCESS_KEY && ($prevNode[\"Function: pickHero\"]?.json?.hero_user || $prevNode[\"Function: pickMid\"]?.json?.mid_user)) {  const attr = [];  if ($prevNode[\"Function: pickHero\"]?.json?.hero_user && $prevNode[\"Function: pickHero\"]?.json?.hero_link)    attr.push(`Hero: <a href=\"${$prevNode[\"Function: pickHero\"].json.hero_link}\">${$prevNode[\"Function: pickHero\"].json.hero_user}</a> via Unsplash`);  if ($prevNode[\"Function: pickMid\"]?.json?.mid_user && $prevNode[\"Function: pickMid\"]?.json?.mid_link)    attr.push(`Mid: <a href=\"${$prevNode[\"Function: pickMid\"].json.mid_link}\">${$prevNode[\"Function: pickMid\"].json.mid_user}</a> via Unsplash`);  if (attr.length) html += `\\n<p class=\"photo-attr\" style=\"font-size:12px;color:#777\">${attr.join(' | ')}</p>`;}\nreturn [{ json: { ...$prevNode[\"Function: explodeLocalizations\"].json, final_html: html, hero_media_id: hero.id } }];"
      },
      "id": "Fn_BuildHTML",
      "name": "Function: build final HTML",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [3700, 320]
    },
    {
      "parameters": {
        "url": "={{$env.WP_BASE}}/wp-json/wp/v2/posts",
        "options": {
          "responseFormat": "json",
          "headerParametersUi": {
            "parameter": [
              { "name": "Content-Type", "value": "application/json" }
            ]
          }
        },
        "authentication": "basicAuth",
        "jsonParameters": true,
        "optionsJson": "={\n  \"status\": \"publish\",\n  \"title\": \"{{$json.loc.title}}\",\n  \"slug\": \"{{$json.loc.slug}}\",\n  \"excerpt\": \"{{$json.loc.excerpt}}\",\n  \"content\": \"{{$json.final_html}}\",\n  \"featured_media\": {{$json.hero_media_id}},\n  \"meta\": { \"lang\": \"{{$json.loc.lang}}\" }\n}"
      },
      "id": "HTTP_WP_CreatePost",
      "name": "WP: Create Post",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [3950, 320],
      "credentials": {
        "httpBasicAuth": {
          "id": "wp-basic-auth",
          "name": "WordPress Basic (env)"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "sheetId": "PUT_YOUR_SPREADSHEET_ID_HERE",
        "range": "Sheet1!A:I",
        "options": {
          "valueInputMode": "RAW"
        },
        "values": "={{ [[$now, $json.source_type, $json.source_value, $json.loc.lang, $json.id, $json.loc.slug, 'publish', $json.hero_media_id, ($prevNode['WP: Upload Media (mid)']?.json?.id || '')]] }}"
      },
      "id": "GS_Append",
      "name": "Google Sheets: Append",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 5,
      "position": [4200, 320],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "gsheets-oauth2",
          "name": "Google Sheets OAuth (your account)"
        }
      }
    },
    {
      "parameters": {
        "url": "https://api.telegram.org/bot{{$env.TG_TOKEN}}/sendMessage",
        "options": {
          "responseFormat": "json",
          "headerParametersUi": {
            "parameter": [
              { "name": "Content-Type", "value": "application/json" }
            ]
          }
        },
        "jsonParameters": true,
        "optionsJson": "={\n  \"chat_id\": {{$json.chat_id}},\n  \"parse_mode\": \"HTML\",\n  \"text\": \"<b>Опубликовано</b>\\nЯзык: {{$json.loc.lang}}\\nСсылка: {{$env.WP_BASE}}/{{$json.loc.slug}}\"\n}"
      },
      "id": "HTTP_TG_Reply",
      "name": "Telegram: sendMessage",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [4450, 320]
    }
  ],
  "connections": {
    "Webhook: Telegram In": {
      "main": [
        [
          {
            "node": "Function: validate & extract",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function: validate & extract": {
      "main": [
        [
          {
            "node": "IF: is URL?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF: is URL?": {
      "main": [
        [
          {
            "node": "HTTP: Fetch HTML",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Function: passThroughText",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: Fetch HTML": {
      "main": [
        [
          {
            "node": "Function: cleanHtml",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function: cleanHtml": {
      "main": [
        [
          {
            "node": "Merge URL/TEXT",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function: passThroughText": {
      "main": [
        [
          {
            "node": "Merge URL/TEXT",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge URL/TEXT": {
      "main": [
        [
          {
            "node": "OpenAI: Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI: Processor": {
      "main": [
        [
          {
            "node": "Function: explodeLocalizations",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function: explodeLocalizations": {
      "main": [
        [
          {
            "node": "IF: Use Unsplash?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF: Use Unsplash?": {
      "main": [
        [
          { "node": "Unsplash: Search hero", "type": "main", "index": 0 },
          { "node": "OpenAI Images: Hero (gen)", "type": "main", "index": 0 }
        ]
      ]
    },
    "Unsplash: Search hero": {
      "main": [
        [
          {
            "node": "Function: pickHero",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function: pickHero": {
      "main": [
        [
          {
            "node": "HTTP: Download hero",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Images: Hero (gen)": {
      "main": [
        [
          {
            "node": "Function: Hero b64→bin",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function: Hero b64→bin": {
      "main": [
        [
          {
            "node": "WP: Upload Media (hero)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: Download hero": {
      "main": [
        [
          {
            "node": "WP: Upload Media (hero)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF: Use Unsplash?": {
      "main": [
        null,
        [
          { "node": "OpenAI Images: Mid (gen)", "type": "main", "index": 0 }
        ]
      ]
    },
    "OpenAI Images: Mid (gen)": {
      "main": [
        [
          {
            "node": "Function: Mid b64→bin",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function: Mid b64→bin": {
      "main": [
        [
          {
            "node": "WP: Upload Media (mid)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Unsplash: Search mid": {
      "main": [
        [
          {
            "node": "Function: pickMid",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function: pickMid": {
      "main": [
        [
          {
            "node": "HTTP: Download mid",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: Download mid": {
      "main": [
        [
          {
            "node": "WP: Upload Media (mid)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WP: Upload Media (hero)": {
      "main": [
        [
          {
            "node": "Merge: media hero+mid",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WP: Upload Media (mid)": {
      "main": [
        [
          {
            "node": "Merge: media hero+mid",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge: media hero+mid": {
      "main": [
        [
          {
            "node": "Function: build final HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function: build final HTML": {
      "main": [
        [
          {
            "node": "WP: Create Post",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WP: Create Post": {
      "main": [
        [
          { "node": "Google Sheets: Append", "type": "main", "index": 0 },
          { "node": "Telegram: sendMessage", "type": "main", "index": 0 }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  }
}