// üóëÔ∏è –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –í–°–ï–• –¢–ï–°–¢–û–í–´–• –°–¢–ê–¢–ï–ô
(function() {
  console.log('üßπ Starting FORCE cleanup of ALL test articles...');
  
  try {
    const storage = localStorage.getItem('icoffio_admin_articles');
    if (!storage) {
      console.log('üì≠ No admin articles found in localStorage');
      return { success: true, message: 'No articles to clean', deleted: 0, remaining: 0 };
    }
    
    const articles = JSON.parse(storage);
    console.log('üìä Found', articles.length, 'articles in localStorage');
    
    // –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ê–ì–†–ï–°–°–ò–í–ù–´–ï –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –í–°–ï–ì–û –º—É—Å–æ—Ä–∞
    const testPatterns = [
      // –†—É—Å—Å–∫–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–ì–õ–ê–í–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê)
      /—Å—Ç–∞—Ç—å—è —Å —Å–∞–π—Ç–∞/i,
      /–∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑–≤–ª–µ—á–µ–Ω/i,
      /—ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω–∞—è/i,
      /–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/i,
      /–∏—Å—Ö–æ–¥–Ω—ã–π url/i,
      
      // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
      /article from/i,
      /content extracted/i,
      /this is an automatically created/i,
      /admin panel testing/i,
      /original url/i,
      
      // –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
      /test/i,
      /—Ç–µ—Å—Ç/i,
      /demo/i,
      /debug/i,
      /emergency/i,
      /quick/i,
      /final/i,
      /runtime/i,
      /verification/i,
      /language.*fix/i,
      /integration/i,
      /post.*deploy/i,
      /ultimate/i,
      /restoration/i,
      /audit/i,
      
      // –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–æ–º–µ–Ω—ã
      /techcrunch/i,
      /example\.com/i,
      /wylsa\.com/i,
      /android\.com/i,
      
      // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã
      /–ø—Ä–æ–≤–µ—Ä–∫–∞/i,
      /–∏—Å–ø—ã—Ç–∞–Ω–∏–µ/i,
      /–≤—Ä–µ–º–µ–Ω–Ω—ã–π/i,
      /–≤—Ä–µ–º–µ–Ω–Ω–æ/i,
      /testing/i
    ];
    
    const originalCount = articles.length;
    let deletedCount = 0;
    
    console.log('üîç Checking each article...');
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–∞—Ç—å–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ
    const cleanedArticles = articles.filter(article => {
      const isTest = testPatterns.some(pattern => 
        pattern.test(article.title) || 
        pattern.test(article.content || '') || 
        pattern.test(article.excerpt || '') ||
        pattern.test(article.slug)
      );
      
      if (isTest) {
        console.log('üóëÔ∏è DELETING TEST ARTICLE:', article.title);
        deletedCount++;
        return false; // Remove this article
      }
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–π –Ω–∏–∑–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
      if (article.content && article.content.length < 200) {
        console.log('üóëÔ∏è DELETING SHORT ARTICLE:', article.title);
        deletedCount++;
        return false;
      }
      
      console.log('‚úÖ KEEPING CLEAN ARTICLE:', article.title);
      return true; // Keep this article
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¢–û–õ–¨–ö–û —á–∏—Å—Ç—ã–µ —Å—Ç–∞—Ç—å–∏
    localStorage.setItem('icoffio_admin_articles', JSON.stringify(cleanedArticles));
    
    console.log('‚úÖ FORCE CLEANUP COMPLETED!');
    console.log('üìä Final Results:');
    console.log('   - Original articles:', originalCount);
    console.log('   - Deleted test articles:', deletedCount);
    console.log('   - Remaining clean articles:', cleanedArticles.length);
    
    if (cleanedArticles.length > 0) {
      console.log('üéØ Remaining articles:');
      cleanedArticles.forEach(article => {
        console.log('   ‚úÖ', article.title, `(${article.slug})`);
      });
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    alert(`üßπ FORCE CLEANUP COMPLETED!

üìä Results:
‚Ä¢ Original articles: ${originalCount}
‚Ä¢ Deleted test articles: ${deletedCount} 
‚Ä¢ Remaining clean articles: ${cleanedArticles.length}

The site should now show only clean, professional content!

Please refresh the page to see the updated content.`);
    
    return { 
      success: true, 
      message: 'Force cleanup completed successfully',
      original: originalCount,
      deleted: deletedCount,
      remaining: cleanedArticles.length,
      cleanedArticles: cleanedArticles.map(a => ({ title: a.title, slug: a.slug }))
    };
    
  } catch (error) {
    console.error('‚ùå Cleanup failed:', error);
    alert('‚ùå Cleanup failed: ' + error.message);
    return { success: false, error: error.message };
  }
})();
