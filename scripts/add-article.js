#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π –≤ icoffio
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/add-article.js --url "https://example.com/article"
 * node scripts/add-article.js --title "–ó–∞–≥–æ–ª–æ–≤–æ–∫" --content "–ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞—Ç—å–∏" --category "tech"
 * node scripts/add-article.js --file "path/to/article.txt"
 */

const fs = require('fs');
const path = require('path');

// –°–∏–º—É–ª–∏—Ä—É–µ–º ES –º–æ–¥—É–ª–∏ –≤ CommonJS —Å—Ä–µ–¥–µ
async function importESM() {
  try {
    const { articleGenerator } = await import('../lib/article-generator.js');
    return { articleGenerator };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error.message);
    console.log('‚ÑπÔ∏è  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç —Å–æ–±—Ä–∞–Ω: npm run build');
    process.exit(1);
  }
}

// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
function parseArguments() {
  const args = process.argv.slice(2);
  const options = {};
  
  for (let i = 0; i < args.length; i += 2) {
    const key = args[i].replace('--', '');
    const value = args[i + 1];
    options[key] = value;
  }
  
  return options;
}

// –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
function readContentFile(filePath) {
  try {
    const fullPath = path.resolve(filePath);
    const content = fs.readFileSync(fullPath, 'utf-8');
    
    // –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    const lines = content.split('\n');
    const title = lines[0].replace(/^#+\s*/, '').trim();
    const body = lines.slice(1).join('\n').trim();
    
    return { title, content: body };
  } catch (error) {
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: ${error.message}`);
  }
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function validateInput(options) {
  const { url, title, content, file } = options;
  
  if (!url && !title && !file) {
    throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å --url, --title –∏–ª–∏ --file');
  }
  
  if (title && !content && !file) {
    throw new Error('–ü—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ --title –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ç–∞–∫–∂–µ —É–∫–∞–∑–∞—Ç—å --content –∏–ª–∏ --file');
  }
  
  return true;
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function showProgress(step, total, message) {
  const progress = Math.round((step / total) * 100);
  const bar = '‚ñà'.repeat(Math.round(progress / 5)) + '‚ñë'.repeat(20 - Math.round(progress / 5));
  process.stdout.write(`\r[${bar}] ${progress}% - ${message}`);
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    console.log('üöÄ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—Ç–∞—Ç–µ–π icoffio\n');
    
    const options = parseArguments();
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É, –µ—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if (Object.keys(options).length === 0) {
      console.log(`–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  
üìã –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –∏–∑ URL:
  node scripts/add-article.js --url "https://example.com/article"

üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞:
  node scripts/add-article.js --title "–ó–∞–≥–æ–ª–æ–≤–æ–∫" --content "–ö–æ–Ω—Ç–µ–Ω—Ç" --category "tech"

üìÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –∏–∑ —Ñ–∞–π–ª–∞:
  node scripts/add-article.js --file "path/to/article.txt" --category "ai"

üè∑Ô∏è  –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ai, apple, games, tech
`);
      process.exit(0);
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    validateInput(options);
    
    // –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
    showProgress(1, 6, '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
    const { articleGenerator } = await importESM();
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    showProgress(2, 6, '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
    let articleInput = {};
    
    if (options.url) {
      articleInput.url = options.url;
    } else if (options.file) {
      const fileData = readContentFile(options.file);
      articleInput.title = fileData.title;
      articleInput.content = fileData.content;
      articleInput.category = options.category || 'tech';
    } else {
      articleInput.title = options.title;
      articleInput.content = options.content;
      articleInput.category = options.category || 'tech';
    }
    
    console.log(`\n\nüìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${articleInput.title || articleInput.url}`);
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏
    showProgress(3, 6, '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞...');
    const posts = await articleGenerator.processArticle(articleInput);
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º—É
    showProgress(4, 6, '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º—É...');
    await articleGenerator.addArticleToSystem(posts);
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    showProgress(5, 6, '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...');
    const outputFile = path.join(__dirname, '..', 'generated-articles.json');
    const existingData = fs.existsSync(outputFile) ? JSON.parse(fs.readFileSync(outputFile, 'utf-8')) : [];
    existingData.push({
      timestamp: new Date().toISOString(),
      input: articleInput,
      posts: posts
    });
    fs.writeFileSync(outputFile, JSON.stringify(existingData, null, 2));
    
    showProgress(6, 6, '–ó–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
    console.log(`\n\n‚úÖ –°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!`);
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   ‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${posts.ru?.title || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}`);
    console.log(`   ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${posts.ru?.category?.name || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}`);
    console.log(`   ‚Ä¢ –Ø–∑—ã–∫–æ–≤: ${Object.keys(posts).length}`);
    console.log(`   ‚Ä¢ Slug: ${posts.ru?.slug || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}`);
    console.log(`\nüìÅ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${outputFile}`);
    
  } catch (error) {
    console.error(`\n‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    
    if (error.stack && process.env.NODE_ENV === 'development') {
      console.error('\nüîç –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
    }
    
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
process.on('SIGINT', () => {
  console.log('\n\n‚ö†Ô∏è  –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main().catch(error => {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = { main, parseArguments, validateInput };

