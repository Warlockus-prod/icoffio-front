#!/usr/bin/env node

/**
 * üåç AUTO-TRANSLATE ALL ARTICLES
 * –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤—Å–µ —Å—Ç–∞—Ç—å–∏ WordPress –Ω–∞ 4 —è–∑—ã–∫–∞ —á–µ—Ä–µ–∑ OpenAI API
 */

const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const WORDPRESS_API = 'https://icoffio.com/graphql';
const NEXTJS_API = 'https://www.icoffio.com/api/translate';
const TARGET_LANGUAGES = ['pl', 'de', 'ro', 'cs']; // en —É–∂–µ –µ—Å—Ç—å
const DELAY_BETWEEN_REQUESTS = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
const MAX_RETRIES = 3;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ç—å–∏ –∏–∑ WordPress
async function getAllArticles() {
  console.log('üìä –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π –∏–∑ WordPress...');
  
  const query = {
    query: `
      query {
        posts(first: 100) {
          nodes {
            title
            slug  
            excerpt
            content
            date
            categories {
              nodes {
                name
                slug
              }
            }
            featuredImage {
              node {
                sourceUrl
              }
            }
          }
        }
      }
    `
  };

  try {
    const response = await fetch(WORDPRESS_API, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(query)
    });

    if (!response.ok) {
      throw new Error(`GraphQL request failed: ${response.status}`);
    }

    const data = await response.json();
    
    if (data.errors) {
      throw new Error(`GraphQL errors: ${JSON.stringify(data.errors)}`);
    }

    const articles = data.data.posts.nodes;
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${articles.length} —Å—Ç–∞—Ç–µ–π –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞`);
    return articles;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π:', error.message);
    return [];
  }
}

// –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –æ–¥–Ω—É —Å—Ç–∞—Ç—å—é –Ω–∞ –æ–¥–∏–Ω —è–∑—ã–∫
async function translateArticle(article, targetLang, retryCount = 0) {
  console.log(`üîÑ –ü–µ—Ä–µ–≤–æ–¥–∏–º "${article.title}" –Ω–∞ ${targetLang.toUpperCase()}...`);
  
  try {
    const response = await fetch(NEXTJS_API, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        action: 'translate-article',
        content: {
          title: article.title,
          excerpt: article.excerpt || '',
          body: article.content || ''
        },
        targetLanguage: targetLang
      })
    });

    if (!response.ok) {
      throw new Error(`Translation API failed: ${response.status}`);
    }

    const translation = await response.json();
    
    if (translation.error) {
      throw new Error(translation.error);
    }

    console.log(`‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –Ω–∞ ${targetLang.toUpperCase()}: "${translation.result.title}"`);
    return {
      ...article,
      translated: {
        language: targetLang,
        title: translation.result.title,
        excerpt: translation.result.excerpt,
        content: translation.result.body
      }
    };
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ ${targetLang}:`, error.message);
    
    if (retryCount < MAX_RETRIES) {
      console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}/${MAX_RETRIES}...`);
      await delay(DELAY_BETWEEN_REQUESTS * 2); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
      return translateArticle(article, targetLang, retryCount + 1);
    }
    
    return null;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function translateAllArticles() {
  console.log('üöÄ –ó–ê–ü–£–°–ö –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ü–ï–†–ï–í–û–î–ê –í–°–ï–• –°–¢–ê–¢–ï–ô');
  console.log(`üéØ –¶–µ–ª–µ–≤—ã–µ —è–∑—ã–∫–∏: ${TARGET_LANGUAGES.join(', ').toUpperCase()}`);
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç—å–∏
  const articles = await getAllArticles();
  
  if (articles.length === 0) {
    console.log('‚ùå –ù–µ—Ç —Å—Ç–∞—Ç–µ–π –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞');
    return;
  }

  const totalTranslations = articles.length * TARGET_LANGUAGES.length;
  let completed = 0;
  const results = [];

  console.log(`üìà –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥: ${articles.length} —Å—Ç–∞—Ç–µ–π √ó ${TARGET_LANGUAGES.length} —è–∑—ã–∫–æ–≤ = ${totalTranslations} –ø–µ—Ä–µ–≤–æ–¥–æ–≤`);
  console.log('‚è∞ –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: ~' + Math.ceil(totalTranslations * 3 / 60) + ' –º–∏–Ω—É—Ç');
  
  // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–∞–∂–¥—É—é —Å—Ç–∞—Ç—å—é –Ω–∞ –≤—Å–µ —è–∑—ã–∫–∏
  for (const article of articles) {
    console.log(`\nüì∞ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: "${article.title}"`);
    const articleTranslations = { original: article, translations: {} };
    
    for (const lang of TARGET_LANGUAGES) {
      const translation = await translateArticle(article, lang);
      
      if (translation) {
        articleTranslations.translations[lang] = translation.translated;
        completed++;
      }
      
      // –ü—Ä–æ–≥—Ä–µ—Å—Å
      const progress = Math.round((completed / totalTranslations) * 100);
      console.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${completed}/${totalTranslations} (${progress}%)`);
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      if (completed < totalTranslations) {
        await delay(DELAY_BETWEEN_REQUESTS);
      }
    }
    
    results.push(articleTranslations);
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const outputFile = path.join(__dirname, '..', 'translations-output.json');
  fs.writeFileSync(outputFile, JSON.stringify(results, null, 2));
  
  console.log(`\nüéâ –ü–ï–†–ï–í–û–î –ó–ê–í–ï–†–®–ï–ù!`);
  console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${articles.length} —Å—Ç–∞—Ç–µ–π`);
  console.log(`üåç –ü–µ—Ä–µ–≤–æ–¥–æ–≤: ${completed}/${totalTranslations}`);
  console.log(`üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${outputFile}`);
  
  return results;
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  translateAllArticles().catch(console.error);
}

module.exports = { translateAllArticles };

