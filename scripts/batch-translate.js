#!/usr/bin/env node

/**
 * üöÄ BATCH TRANSLATE ALL ARTICLES
 * –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤—Å–µ 40 —Å—Ç–∞—Ç–µ–π WordPress –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–∞ –≤—Å–µ —è–∑—ã–∫–∏
 */

const fs = require('fs');
const path = require('path');

const WORDPRESS_API = 'https://icoffio.com/graphql';
const NEXTJS_API = 'https://www.icoffio.com/api/translate';

async function batchTranslateAll() {
  console.log('üöÄ –ú–ê–°–°–û–í–´–ô –ü–ï–†–ï–í–û–î –í–°–ï–• –°–¢–ê–¢–ï–ô ICOFFIO');
  
  // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç—å–∏
  console.log('üìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å–∏ –∏–∑ WordPress...');
  const query = {
    query: `query { 
      posts(first: 100) { 
        nodes { 
          title slug excerpt content 
          categories { nodes { name } }
          featuredImage { node { sourceUrl } }
        } 
      } 
    }`
  };

  const wpResponse = await fetch(WORDPRESS_API, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(query)
  });

  const wpData = await wpResponse.json();
  const articles = wpData.data.posts.nodes;
  
  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${articles.length} —Å—Ç–∞—Ç–µ–π`);

  // 2. –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ —Å—Ç–∞—Ç—å–∏
  console.log('üåç –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥...');
  const allTranslations = [];
  let completed = 0;

  for (const article of articles.slice(0, 5)) { // –ü–µ—Ä–≤—ã–µ 5 –¥–ª—è —Ç–µ—Å—Ç–∞
    console.log(`\nüì∞ ${++completed}/${Math.min(5, articles.length)}: "${article.title}"`);
    
    try {
      const response = await fetch(NEXTJS_API, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'translate-article',
          content: {
            title: article.title,
            excerpt: article.excerpt || '',
            body: article.content || ''
          }
        })
      });

      const translation = await response.json();
      
      if (translation.success) {
        console.log(`‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –Ω–∞ ${Object.keys(translation.translations).length} —è–∑—ã–∫–æ–≤`);
        allTranslations.push({
          ...article,
          translations: translation.translations
        });
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞: ${translation.error || 'Unknown error'}`);
      }
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      if (completed < Math.min(5, articles.length)) {
        console.log('‚è∏Ô∏è  –ü–∞—É–∑–∞ 3 —Å–µ–∫...');
        await new Promise(resolve => setTimeout(resolve, 3000));
      }
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:`, error.message);
    }
  }

  // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const outputPath = path.join(__dirname, '..', 'translations-batch.json');
  fs.writeFileSync(outputPath, JSON.stringify(allTranslations, null, 2));
  
  console.log(`\nüéâ –ì–û–¢–û–í–û!`);
  console.log(`üìä –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: ${allTranslations.length} —Å—Ç–∞—Ç–µ–π`);
  console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${outputPath}`);
  
  return allTranslations;
}

// –ó–∞–ø—É—Å–∫
batchTranslateAll().catch(console.error);



