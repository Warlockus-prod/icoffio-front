/**
 * ‚úÖ –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–ù–û–ô –°–¢–ê–¢–¨–ò AI REVOLUTION 2025
 * 
 * –£–¥–∞–ª—è–µ—Ç —Ä—É—Å—Å–∫—É—é –≤–µ—Ä—Å–∏—é —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ WordPress API
 * –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è React DOM –æ—à–∏–±–æ–∫
 */

const https = require('https');
const querystring = require('querystring');

console.log('üö® –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: AI Revolution 2025');
console.log('============================================\n');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WordPress API
const WP_API_BASE = 'https://app.icoffio.com/wp-json/wp/v2';
const WP_USERNAME = process.env.WP_USERNAME || 'admin'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
const WP_PASSWORD = process.env.WP_PASSWORD || 'your_password'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ WordPress API
 */
function makeRequest(method, endpoint, data = null) {
  return new Promise((resolve, reject) => {
    const url = new URL(WP_API_BASE + endpoint);
    
    const auth = Buffer.from(`${WP_USERNAME}:${WP_PASSWORD}`).toString('base64');
    
    const options = {
      hostname: url.hostname,
      port: url.port || 443,
      path: url.pathname + url.search,
      method: method,
      headers: {
        'Authorization': `Basic ${auth}`,
        'Content-Type': 'application/json',
        'User-Agent': 'icoffio-cleanup-script/1.0'
      }
    };

    if (data && (method === 'POST' || method === 'PUT')) {
      const postData = JSON.stringify(data);
      options.headers['Content-Length'] = Buffer.byteLength(postData);
    }

    const req = https.request(options, (res) => {
      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        try {
          const parsed = JSON.parse(responseData);
          if (res.statusCode >= 200 && res.statusCode < 300) {
            resolve(parsed);
          } else {
            reject(new Error(`HTTP ${res.statusCode}: ${parsed.message || responseData}`));
          }
        } catch (e) {
          if (res.statusCode >= 200 && res.statusCode < 300) {
            resolve(responseData);
          } else {
            reject(new Error(`HTTP ${res.statusCode}: ${responseData}`));
          }
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    if (data && (method === 'POST' || method === 'PUT')) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 */
async function fixAIRevolutionArticle() {
  try {
    console.log('üîç 1. –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π "AI Revolution 2025"...');
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—Ç–∞—Ç—å–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "AI Revolution 2025"
    const posts = await makeRequest('GET', '/posts?search=AI Revolution 2025&per_page=10');
    
    console.log(`   –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: ${posts.length}`);
    
    let russianPost = null;
    let englishPost = null;
    
    for (const post of posts) {
      console.log(`   - ID: ${post.id}, Slug: ${post.slug}, Title: ${post.title.rendered}`);
      
      if (post.slug === 'ai-revolution-2025-ru') {
        russianPost = post;
      } else if (post.slug === 'ai-revolution-2025-en') {
        englishPost = post;
      }
    }
    
    if (russianPost) {
      console.log('\nüóëÔ∏è 2. –£–¥–∞–ª–µ–Ω–∏–µ —Ä—É—Å—Å–∫–æ–π –≤–µ—Ä—Å–∏–∏ —Å—Ç–∞—Ç—å–∏...');
      console.log(`   –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—å—é ID: ${russianPost.id}, Slug: ${russianPost.slug}`);
      
      try {
        await makeRequest('DELETE', `/posts/${russianPost.id}?force=true`);
        console.log('   ‚úÖ –†—É—Å—Å–∫–∞—è –≤–µ—Ä—Å–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');
      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${error.message}`);
      }
    } else {
      console.log('\nüí° 2. –†—É—Å—Å–∫–∞—è –≤–µ—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ —É–¥–∞–ª–µ–Ω–∞)');
    }
    
    if (englishPost) {
      console.log('\n‚úÖ 3. –ê–Ω–≥–ª–∏–π—Å–∫–∞—è –≤–µ—Ä—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
      console.log(`   ID: ${englishPost.id}, Slug: ${englishPost.slug}`);
      console.log(`   URL: https://app.icoffio.com/en/article/${englishPost.slug}`);
    } else {
      console.log('\n‚ö†Ô∏è 3. –ê–Ω–≥–ª–∏–π—Å–∫–∞—è –≤–µ—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    console.log('\nüßπ 4. –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞...');
    // –í —Ä–µ–∞–ª—å–Ω–æ–º WordPress –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –æ—á–∏—Å—Ç–∫—É –∫–µ—à–∞ —á–µ—Ä–µ–∑ API –ø–ª–∞–≥–∏–Ω–æ–≤
    console.log('   üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–∏—Å—Ç–∏—Ç—å –∫–µ—à WordPress –≤—Ä—É—á–Ω—É—é');
    
    console.log('\n‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
    console.log('   –¢–µ–ø–µ—Ä—å —Å—Ç–∞—Ç—å—è –¥–æ–ª–∂–Ω–∞ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å—Å—è –±–µ–∑ React DOM –æ—à–∏–±–æ–∫');
    
  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:', error.message);
    console.log('\nüìã –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ï –†–ï–®–ï–ù–ò–Ø:');
    console.log('1. –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL –º–∏–≥—Ä–∞—Ü–∏—é: fix-all-old-errors.sql');
    console.log('2. –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ç—å—é —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É WordPress');
    console.log('3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API
 */
function checkAPIConfig() {
  if (!process.env.WP_USERNAME || !process.env.WP_PASSWORD) {
    console.log('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ WordPress API –Ω–µ –∑–∞–¥–∞–Ω—ã');
    console.log('');
    console.log('–î–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ API —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:');
    console.log('export WP_USERNAME="–≤–∞—à_–ª–æ–≥–∏–Ω"');
    console.log('export WP_PASSWORD="–≤–∞—à_–ø–∞—Ä–æ–ª—å"');
    console.log('');
    console.log('–ò–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ SQL:');
    console.log('mysql -u username -p database_name < fix-all-old-errors.sql');
    console.log('');
    return false;
  }
  return true;
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (checkAPIConfig()) {
  fixAIRevolutionArticle();
} else {
  console.log('üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ SQL –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã');
}
