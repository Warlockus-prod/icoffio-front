// scripts/seed-wp.js
// –ó–∞–ø—É—Å–∫:
// WP_BASE=https://icoffio.com WP_USER=admin WP_APP_PASS="V3Be tZgA 5Gxa Ph8N 13iO 4mju" npm run seed

const WP_BASE = process.env.WP_BASE || "https://icoffio.com";
const WP_USER = process.env.WP_USER;
const WP_APP_PASS = process.env.WP_APP_PASS;
if (!WP_USER || !WP_APP_PASS) {
  console.error("Set WP_USER and WP_APP_PASS env vars"); process.exit(1);
}
const AUTH = "Basic " + Buffer.from(`${WP_USER}:${WP_APP_PASS}`).toString("base64");

// slug -> numeric ID (–∏–∑ —Ç–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö)
const CATEGORY_MAP = {
  ai: 5, apple: 4, games: 7, "news-2": 1, tech: 3,
};

const POSTS = [
  { cat:"ai",    title:"–ù–µ–π—Ä–æ—Å–µ—Ç–∏ –≤ –∫–∞—Ä–º–∞–Ω–µ: –∫–∞–∫ —Å–º–∞—Ä—Ç—Ñ–æ–Ω—ã –ø–æ–Ω–∏–º–∞—é—Ç —Ä–µ—á—å",
    image:"https://images.unsplash.com/photo-1518770660439-4636190af475?q=80&w=1200&auto=format&fit=crop",
    content:"–î–µ–º–æ‚Äë–∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ—Ä–æ–Ω—Ç–∞. –ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ, –ø–æ—á–µ–º—É –≤–∞–∂–Ω–æ, —á—Ç–æ –¥–µ–ª–∞—Ç—å —á–∏—Ç–∞—Ç–µ–ª—é."},
  { cat:"tech",  title:"–¢–æ–Ω–∫–∏–µ –Ω–æ—É—Ç–±—É–∫–∏ 2025: —á—Ç–æ –≤–∞–∂–Ω–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ",
    image:"https://images.unsplash.com/photo-1498050108023-c5249f4df085?q=80&w=1200&auto=format&fit=crop",
    content:"–ö–æ—Ä–æ—Ç–∫–∏–π –æ–±–∑–æ—Ä —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –Ω–∞ —á—Ç–æ —Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ."},
  { cat:"apple", title:"iOS 19: –ø—è—Ç—å —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —ç–∫–æ–Ω–æ–º—è—Ç –≤—Ä–µ–º—è",
    image:"https://images.unsplash.com/photo-1517336714731-489689fd1ca8?q=80&w=1200&auto=format&fit=crop",
    content:"–ü–æ–ª–µ–∑–Ω—ã–µ –º–µ–ª–æ—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—â—É—â–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å."},
  { cat:"games", title:"–ò–Ω–¥–∏‚Äë—Ö–∏—Ç—ã –º–µ—Å—è—Ü–∞: —á—Ç–æ –ø–æ–∏–≥—Ä–∞—Ç—å –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö",
    image:"https://images.unsplash.com/photo-1512428559087-560fa5ceab42?q=80&w=1200&auto=format&fit=crop",
    content:"–ù–µ–±–æ–ª—å—à–∞—è –ø–æ–¥–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å —Ö–æ—Ä–æ—à–∏–º –≥–µ–π–º–ø–ª–µ–µ–º."},
  { cat:"news-2",title:"–ú–∏–Ω–∏‚Äë–æ–±–∑–æ—Ä: –Ω–∞—É—à–Ω–∏–∫–∏ —Å –∫–µ–π—Å–æ–º‚Äë–º—ã—à–∫–æ–π ‚Äî —É–¥–æ–±–Ω–æ –ª–∏ —ç—Ç–æ?",
    image:"https://images.unsplash.com/photo-1510557880182-3d4d3cba35a5?q=80&w=1200&auto=format&fit=crop",
    content:"–ù–µ–æ–±—ã—á–Ω—ã–π —Ñ–æ—Ä–º‚Äë—Ñ–∞–∫—Ç–æ—Ä –∏ —Ä–µ–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."},
];

function slugify(s) {
  return s.toLowerCase().replace(/‚Äî|‚Äì/g,"-").replace(/[^a-z0-9]+/g,"-").replace(/(^-|-$)/g,"");
}

async function fetchBuffer(url) {
  const res = await fetch(url);
  if (!res.ok) throw new Error("image download failed");
  const arr = new Uint8Array(await res.arrayBuffer());
  return Buffer.from(arr);
}

async function uploadMedia(imageUrl) {
  try {
    const buf = await fetchBuffer(imageUrl);
    const res = await fetch(`${WP_BASE}/wp-json/wp/v2/media`, {
      method: "POST",
      headers: {
        Authorization: AUTH,
        "Content-Type": "image/jpeg",
        "Content-Disposition": 'attachment; filename="cover.jpg"',
      },
      body: buf,
    });
    const json = await res.json();
    if (!res.ok) { console.error("Media upload error:", json); return 0; }
    return json.id || 0;
  } catch (e) {
    console.warn("Media not uploaded:", e); return 0;
  }
}

async function createPost(p) {
  const featured_media = await uploadMedia(p.image);
  const slug = slugify(p.title);
  const categoryId = CATEGORY_MAP[p.cat] || 0;

  const body = {
    title: p.title,
    slug,
    status: "publish",
    content: `<p><img src="${p.image}" alt=""/></p><p><strong>${p.title}</strong></p><p>${p.content}</p>`,
    excerpt: `–ö–æ—Ä–æ—Ç–∫–∏–π –∞–Ω–æ–Ω—Å: ${p.title}`,
    categories: categoryId ? [categoryId] : [],
    featured_media,
  };

  const res = await fetch(`${WP_BASE}/wp-json/wp/v2/posts`, {
    method: "POST",
    headers: { Authorization: AUTH, "Content-Type": "application/json" },
    body: JSON.stringify(body),
  });
  const json = await res.json();
  if (!res.ok) { console.error("Create post error:", json); throw new Error("create failed"); }
  console.log("‚úÖ Created:", json.slug);
}

(async () => {
  console.log("üöÄ Starting WordPress seeding...");
  for (const p of POSTS) {
    try { 
      console.log(`üìù Creating: ${p.title}`);
      await createPost(p); 
    } catch (e) { 
      console.error(`‚ùå Failed to create: ${p.title}`, e); 
    }
  }
  console.log("üéâ Seeding completed!");
})();
