#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç–∞—Ç–µ–π –Ω–∞ –≤—Å–µ —è–∑—ã–∫–∏
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/translate-existing-articles.js
 * node scripts/translate-existing-articles.js --language en
 * node scripts/translate-existing-articles.js --article "article-slug"
 */

const fs = require('fs');
const path = require('path');

// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏
const SUPPORTED_LANGUAGES = ['en', 'pl', 'de', 'ro', 'cs'];

// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
function parseArguments() {
  const args = process.argv.slice(2);
  const options = {};
  
  for (let i = 0; i < args.length; i += 2) {
    const key = args[i].replace('--', '');
    const value = args[i + 1];
    options[key] = value;
  }
  
  return options;
}

// –°–∏–º—É–ª–∏—Ä—É–µ–º ES –º–æ–¥—É–ª–∏
async function importModules() {
  try {
    const { translationService } = await import('../lib/translation-service.js');
    const { localArticles } = await import('../lib/local-articles.js');
    return { translationService, localArticles };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error.message);
    console.log('‚ÑπÔ∏è  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç —Å–æ–±—Ä–∞–Ω: npm run build');
    process.exit(1);
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Å—Ç–∞—Ç—å–∏
function createTranslatedArticle(originalArticle, translatedContent, language) {
  return {
    ...originalArticle,
    slug: `${originalArticle.slug}-${language}`,
    title: translatedContent.title,
    excerpt: translatedContent.excerpt,
    contentHtml: translatedContent.body,
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    date: originalArticle.date,
    publishedAt: originalArticle.publishedAt,
    image: originalArticle.image,
    imageAlt: translatedContent.title,
    category: originalArticle.category,
    images: originalArticle.images
  };
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ —Ñ–∞–π–ª
function saveTranslations(translations, outputPath) {
  const translationsData = {
    generated: new Date().toISOString(),
    totalArticles: translations.length,
    languages: SUPPORTED_LANGUAGES,
    translations: translations
  };
  
  fs.writeFileSync(outputPath, JSON.stringify(translationsData, null, 2));
  console.log(`üíæ –ü–µ—Ä–µ–≤–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${outputPath}`);
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function showProgress(current, total, message) {
  const progress = Math.round((current / total) * 100);
  const bar = '‚ñà'.repeat(Math.round(progress / 5)) + '‚ñë'.repeat(20 - Math.round(progress / 5));
  process.stdout.write(`\r[${bar}] ${progress}% - ${message}`);
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    console.log('üåê –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å—Ç–∞—Ç–µ–π icoffio\n');
    
    const options = parseArguments();
    const targetLanguage = options.language;
    const targetArticle = options.article;
    
    // –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
    console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª–∏...');
    const { translationService, localArticles } = await importModules();
    
    if (!translationService.isAvailable()) {
      throw new Error('–°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ OPENAI_API_KEY');
    }
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–µ–π
    let articlesToTranslate = localArticles;
    
    if (targetArticle) {
      articlesToTranslate = localArticles.filter(article => 
        article.slug === targetArticle
      );
      
      if (articlesToTranslate.length === 0) {
        throw new Error(`–°—Ç–∞—Ç—å—è —Å slug "${targetArticle}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      }
    }
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —è–∑—ã–∫–æ–≤
    let languagesToTranslate = SUPPORTED_LANGUAGES;
    
    if (targetLanguage) {
      if (!SUPPORTED_LANGUAGES.includes(targetLanguage)) {
        throw new Error(`–Ø–∑—ã–∫ "${targetLanguage}" –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`);
      }
      languagesToTranslate = [targetLanguage];
    }
    
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:`);
    console.log(`   ‚Ä¢ –°—Ç–∞—Ç–µ–π: ${articlesToTranslate.length}`);
    console.log(`   ‚Ä¢ –Ø–∑—ã–∫–æ–≤: ${languagesToTranslate.length}`);
    console.log(`   ‚Ä¢ –í—Å–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${articlesToTranslate.length * languagesToTranslate.length}\n`);
    
    const allTranslations = [];
    let completed = 0;
    const total = articlesToTranslate.length * languagesToTranslate.length;
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π —Å—Ç–∞—Ç—å–∏
    for (const article of articlesToTranslate) {
      const articleTranslations = {
        originalSlug: article.slug,
        originalTitle: article.title,
        translations: {}
      };
      
      // –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞–∂–¥—ã–π —è–∑—ã–∫
      for (const language of languagesToTranslate) {
        try {
          showProgress(completed, total, `${article.title.slice(0, 30)}... ‚Üí ${language}`);
          
          // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –∏–∑ HTML
          const cleanContent = article.contentHtml
            .replace(/<[^>]*>/g, ' ')
            .replace(/\s+/g, ' ')
            .trim()
            .slice(0, 8000); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è API
          
          const translatedContent = await translationService.translateContent(
            {
              title: article.title,
              excerpt: article.excerpt,
              body: cleanContent
            },
            language
          );
          
          // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—É—é —Å—Ç–∞—Ç—å—é
          const translatedArticle = createTranslatedArticle(
            article, 
            translatedContent, 
            language
          );
          
          articleTranslations.translations[language] = translatedArticle;
          completed++;
          
          // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
          await new Promise(resolve => setTimeout(resolve, 1000));
          
        } catch (error) {
          console.error(`\n‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ "${article.title}" –Ω–∞ ${language}:`, error.message);
          completed++;
        }
      }
      
      allTranslations.push(articleTranslations);
    }
    
    console.log('\n\n‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const outputPath = path.join(__dirname, '..', 'translated-articles.json');
    saveTranslations(allTranslations, outputPath);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const successfulTranslations = allTranslations.reduce((sum, article) => 
      sum + Object.keys(article.translations).length, 0
    );
    
    console.log(`\nüìà –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${successfulTranslations}/${total}`);
    console.log(`   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((successfulTranslations/total)*100)}%`);
    console.log(`   ‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ~${Math.round(total * 1.5 / 60)} –º–∏–Ω`);
    
  } catch (error) {
    console.error(`\n‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
process.on('SIGINT', () => {
  console.log('\n\n‚ö†Ô∏è  –ü–µ—Ä–µ–≤–æ–¥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main().catch(error => {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

